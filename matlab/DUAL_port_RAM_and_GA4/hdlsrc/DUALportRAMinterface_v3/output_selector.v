// -------------------------------------------------------------
// 
// File Name: DUAL_port_RAM_and_GA4\hdlsrc\DUALportRAMinterface_v3\output_selector.v
// Created: 2024-05-15 10:45:59
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: output_selector
// Source Path: DUALportRAMinterface_v3/PL/integration_block1/GA_main/coefficent_array/output_selector
// Hierarchy Level: 4
// Model version: 1.52
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module output_selector
          (chose_port,
           In2_0,
           In2_1,
           In2_2,
           In2_3,
           In2_4,
           In2_5,
           In2_6,
           In3_0,
           In3_1,
           In3_2,
           In3_3,
           In3_4,
           In3_5,
           In3_6,
           In4_0,
           In4_1,
           In4_2,
           In4_3,
           In4_4,
           In4_5,
           In4_6,
           In5_0,
           In5_1,
           In5_2,
           In5_3,
           In5_4,
           In5_5,
           In5_6,
           Out1_0,
           Out1_1,
           Out1_2,
           Out1_3,
           Out1_4,
           Out1_5,
           Out1_6);


  input   [3:0] chose_port;  // ufix4
  input   signed [32:0] In2_0;  // sfix33_En15
  input   signed [32:0] In2_1;  // sfix33_En15
  input   signed [32:0] In2_2;  // sfix33_En15
  input   signed [32:0] In2_3;  // sfix33_En15
  input   signed [32:0] In2_4;  // sfix33_En15
  input   signed [32:0] In2_5;  // sfix33_En15
  input   signed [32:0] In2_6;  // sfix33_En15
  input   signed [32:0] In3_0;  // sfix33_En15
  input   signed [32:0] In3_1;  // sfix33_En15
  input   signed [32:0] In3_2;  // sfix33_En15
  input   signed [32:0] In3_3;  // sfix33_En15
  input   signed [32:0] In3_4;  // sfix33_En15
  input   signed [32:0] In3_5;  // sfix33_En15
  input   signed [32:0] In3_6;  // sfix33_En15
  input   signed [32:0] In4_0;  // sfix33_En15
  input   signed [32:0] In4_1;  // sfix33_En15
  input   signed [32:0] In4_2;  // sfix33_En15
  input   signed [32:0] In4_3;  // sfix33_En15
  input   signed [32:0] In4_4;  // sfix33_En15
  input   signed [32:0] In4_5;  // sfix33_En15
  input   signed [32:0] In4_6;  // sfix33_En15
  input   signed [32:0] In5_0;  // sfix33_En15
  input   signed [32:0] In5_1;  // sfix33_En15
  input   signed [32:0] In5_2;  // sfix33_En15
  input   signed [32:0] In5_3;  // sfix33_En15
  input   signed [32:0] In5_4;  // sfix33_En15
  input   signed [32:0] In5_5;  // sfix33_En15
  input   signed [32:0] In5_6;  // sfix33_En15
  output  signed [32:0] Out1_0;  // sfix33_En15
  output  signed [32:0] Out1_1;  // sfix33_En15
  output  signed [32:0] Out1_2;  // sfix33_En15
  output  signed [32:0] Out1_3;  // sfix33_En15
  output  signed [32:0] Out1_4;  // sfix33_En15
  output  signed [32:0] Out1_5;  // sfix33_En15
  output  signed [32:0] Out1_6;  // sfix33_En15


  wire ensure_correct_output_out1;  // ufix1
  wire switch_compare_1;
  wire [3:0] default_value_out1;  // ufix4
  wire [3:0] Switch1_out1;  // ufix4
  wire signed [32:0] In2 [0:6];  // sfix33_En15 [7]
  wire signed [32:0] In3 [0:6];  // sfix33_En15 [7]
  wire signed [32:0] In4 [0:6];  // sfix33_En15 [7]
  wire switch_compare_1_1;
  wire [6:0] ensure_correct_output_out1_scalarexpand;  // ufix1 [7]
  wire signed [32:0] ensure_correct_output_out1_scalarexpand_dtc [0:6];  // sfix33_En15 [7]
  wire signed [32:0] In5 [0:6];  // sfix33_En15 [7]
  reg signed [32:0] Multiport_Switch_out1 [0:6];  // sfix33_En15 [7]
  reg signed [32:0] Switch_out1 [0:6];  // sfix33_En15 [7]
  reg signed [31:0] Multiport_Switch_t_0_0;  // int32
  reg signed [31:0] Multiport_Switch_t_1;  // int32
  reg signed [31:0] Multiport_Switch_t_2_0;  // int32
  reg signed [31:0] Multiport_Switch_t_3;  // int32
  reg signed [31:0] Switch_t_0_0;  // int32
  reg signed [31:0] Switch_t_1;  // int32


  assign ensure_correct_output_out1 = 1'b0;



  assign switch_compare_1 = chose_port > 4'b0000;



  assign default_value_out1 = 4'b0001;



  assign Switch1_out1 = (switch_compare_1 == 1'b0 ? default_value_out1 :
              chose_port);



  assign In2[0] = In2_0;
  assign In2[1] = In2_1;
  assign In2[2] = In2_2;
  assign In2[3] = In2_3;
  assign In2[4] = In2_4;
  assign In2[5] = In2_5;
  assign In2[6] = In2_6;

  assign In3[0] = In3_0;
  assign In3[1] = In3_1;
  assign In3[2] = In3_2;
  assign In3[3] = In3_3;
  assign In3[4] = In3_4;
  assign In3[5] = In3_5;
  assign In3[6] = In3_6;

  assign In4[0] = In4_0;
  assign In4[1] = In4_1;
  assign In4[2] = In4_2;
  assign In4[3] = In4_3;
  assign In4[4] = In4_4;
  assign In4[5] = In4_5;
  assign In4[6] = In4_6;

  assign switch_compare_1_1 = chose_port > 4'b0000;



  assign ensure_correct_output_out1_scalarexpand[0] = ensure_correct_output_out1;
  assign ensure_correct_output_out1_scalarexpand[1] = ensure_correct_output_out1;
  assign ensure_correct_output_out1_scalarexpand[2] = ensure_correct_output_out1;
  assign ensure_correct_output_out1_scalarexpand[3] = ensure_correct_output_out1;
  assign ensure_correct_output_out1_scalarexpand[4] = ensure_correct_output_out1;
  assign ensure_correct_output_out1_scalarexpand[5] = ensure_correct_output_out1;
  assign ensure_correct_output_out1_scalarexpand[6] = ensure_correct_output_out1;


  genvar ii1;
  generate
    for(ii1 = 32'sd0; ii1 <= 32'sd6; ii1 = ii1 + 32'sd1) begin:ensure_correct_output_out1_scalarexpand_dtc_gen
      assign ensure_correct_output_out1_scalarexpand_dtc[ii1] = {17'b0, {ensure_correct_output_out1_scalarexpand[ii1], 15'b000000000000000}};
    end
  endgenerate




  assign In5[0] = In5_0;
  assign In5[1] = In5_1;
  assign In5[2] = In5_2;
  assign In5[3] = In5_3;
  assign In5[4] = In5_4;
  assign In5[5] = In5_5;
  assign In5[6] = In5_6;

  always @* begin
    if (Switch1_out1 == 4'b0001) begin
      for(Multiport_Switch_t_0_0 = 32'sd0; Multiport_Switch_t_0_0 <= 32'sd6; Multiport_Switch_t_0_0 = Multiport_Switch_t_0_0 + 32'sd1) begin
        Multiport_Switch_out1[Multiport_Switch_t_0_0] = In2[Multiport_Switch_t_0_0];
      end
    end
    else if (Switch1_out1 == 4'b0010) begin
      for(Multiport_Switch_t_1 = 32'sd0; Multiport_Switch_t_1 <= 32'sd6; Multiport_Switch_t_1 = Multiport_Switch_t_1 + 32'sd1) begin
        Multiport_Switch_out1[Multiport_Switch_t_1] = In3[Multiport_Switch_t_1];
      end
    end
    else if (Switch1_out1 == 4'b0011) begin
      for(Multiport_Switch_t_3 = 32'sd0; Multiport_Switch_t_3 <= 32'sd6; Multiport_Switch_t_3 = Multiport_Switch_t_3 + 32'sd1) begin
        Multiport_Switch_out1[Multiport_Switch_t_3] = In4[Multiport_Switch_t_3];
      end
    end
    else begin
      for(Multiport_Switch_t_2_0 = 32'sd0; Multiport_Switch_t_2_0 <= 32'sd6; Multiport_Switch_t_2_0 = Multiport_Switch_t_2_0 + 32'sd1) begin
        Multiport_Switch_out1[Multiport_Switch_t_2_0] = In5[Multiport_Switch_t_2_0];
      end
    end
  end



  always @* begin
    if (switch_compare_1_1 == 1'b0) begin
      for(Switch_t_1 = 32'sd0; Switch_t_1 <= 32'sd6; Switch_t_1 = Switch_t_1 + 32'sd1) begin
        Switch_out1[Switch_t_1] = ensure_correct_output_out1_scalarexpand_dtc[Switch_t_1];
      end
    end
    else begin
      for(Switch_t_0_0 = 32'sd0; Switch_t_0_0 <= 32'sd6; Switch_t_0_0 = Switch_t_0_0 + 32'sd1) begin
        Switch_out1[Switch_t_0_0] = Multiport_Switch_out1[Switch_t_0_0];
      end
    end
  end



  assign Out1_0 = Switch_out1[0];

  assign Out1_1 = Switch_out1[1];

  assign Out1_2 = Switch_out1[2];

  assign Out1_3 = Switch_out1[3];

  assign Out1_4 = Switch_out1[4];

  assign Out1_5 = Switch_out1[5];

  assign Out1_6 = Switch_out1[6];

endmodule  // output_selector

