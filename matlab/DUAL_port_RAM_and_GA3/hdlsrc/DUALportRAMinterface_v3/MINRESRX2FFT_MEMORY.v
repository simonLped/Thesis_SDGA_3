// -------------------------------------------------------------
// 
// File Name: DUAL_port_RAM_and_GA3\hdlsrc\DUALportRAMinterface_v3\MINRESRX2FFT_MEMORY.v
// Created: 2024-05-04 07:38:48
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: MINRESRX2FFT_MEMORY
// Source Path: DUALportRAMinterface_v3/PL/integration_block1/FFT/MINRESRX2FFT_MEMORY
// Hierarchy Level: 3
// Model version: 1.38
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module MINRESRX2FFT_MEMORY
          (clk,
           reset_x,
           enb,
           dMemIn1_re,
           dMemIn1_im,
           dMemIn2_re,
           dMemIn2_im,
           wrEnb1,
           wrEnb2,
           wrEnb3,
           rdEnb1,
           rdEnb2,
           rdEnb3,
           stage,
           initIC,
           unLoadPhase,
           syncReset,
           dMemOut1_re,
           dMemOut1_im,
           dMemOut2_re,
           dMemOut2_im);


  input   clk;
  input   reset_x;
  input   enb;
  input   signed [27:0] dMemIn1_re;  // sfix28_En14
  input   signed [27:0] dMemIn1_im;  // sfix28_En14
  input   signed [27:0] dMemIn2_re;  // sfix28_En14
  input   signed [27:0] dMemIn2_im;  // sfix28_En14
  input   wrEnb1;
  input   wrEnb2;
  input   wrEnb3;
  input   rdEnb1;
  input   rdEnb2;
  input   rdEnb3;
  input   [3:0] stage;  // ufix4
  input   initIC;
  input   unLoadPhase;
  input   syncReset;
  output  signed [27:0] dMemOut1_re;  // sfix28_En14
  output  signed [27:0] dMemOut1_im;  // sfix28_En14
  output  signed [27:0] dMemOut2_re;  // sfix28_En14
  output  signed [27:0] dMemOut2_im;  // sfix28_En14


  reg signed [27:0] intdelay_reg [0:1];  // sfix28 [2]
  wire signed [27:0] intdelay_reg_next [0:1];  // sfix28_En14 [2]
  wire signed [27:0] wrData01Dly_re;  // sfix28_En14
  reg signed [27:0] intdelay_reg_1 [0:1];  // sfix28 [2]
  wire signed [27:0] intdelay_reg_next_1 [0:1];  // sfix28_En14 [2]
  wire signed [27:0] wrData10Dly_re;  // sfix28_En14
  reg signed [27:0] intdelay_reg_2 [0:1];  // sfix28 [2]
  wire signed [27:0] intdelay_reg_next_2 [0:1];  // sfix28_En14 [2]
  wire signed [27:0] wrData10Dly_im;  // sfix28_En14
  reg signed [27:0] intdelay_reg_3 [0:1];  // sfix28 [2]
  wire signed [27:0] intdelay_reg_next_3 [0:1];  // sfix28_En14 [2]
  wire signed [27:0] wrData11Dly_re;  // sfix28_En14
  reg signed [27:0] intdelay_reg_4 [0:1];  // sfix28 [2]
  wire signed [27:0] intdelay_reg_next_4 [0:1];  // sfix28_En14 [2]
  wire signed [27:0] wrData11Dly_im;  // sfix28_En14
  reg [10:0] wrAddr10;  // ufix11
  reg  wrEnb11;
  wire [10:0] rdAddr10;  // ufix11
  wire signed [27:0] rdData11_im;  // sfix28_En14
  wire signed [27:0] rdData11_re;  // sfix28_En14
  reg  wrEnb10;
  wire signed [27:0] rdData10_im;  // sfix28_En14
  reg [10:0] rdAddr10_tmp;  // ufix11
  wire addrBit10_11;
  wire addrBit10_10;
  wire addrBit10_9;
  wire addrBit10_8;
  wire addrBit10_7;
  wire addrBit10_6;
  wire addrBit10_5;
  wire addrBit10_4;
  wire addrBit10_3;
  wire addrBit10_2;
  wire addrBit10_1;
  wire [10:0] rdAddr10_bitRev;  // ufix11
  wire signed [27:0] rdData10_re;  // sfix28_En14
  reg [10:0] minResRX2FFTMEMCtrl_cnt1;  // ufix11
  reg [10:0] minResRX2FFTMEMCtrl_cnt2;  // ufix11
  reg [10:0] minResRX2FFTMEMCtrl_cnt1LSB;  // ufix11
  reg [10:0] minResRX2FFTMEMCtrl_cnt2MSB;  // ufix11
  reg [10:0] minResRX2FFTMEMCtrl_IC;  // ufix11
  reg  minResRX2FFTMEMCtrl_initCnt;
  reg  minResRX2FFTMEMCtrl_rdEnb2Dly;
  reg  minResRX2FFTMEMCtrl_rdEnb3Dly;
  reg [10:0] minResRX2FFTMEMCtrl_wrAddrReg23;  // ufix11
  reg [10:0] minResRX2FFTMEMCtrl_wrAddrReg1;  // ufix11
  reg [10:0] minResRX2FFTMEMCtrl_rdAddrReg1;  // ufix11
  reg [10:0] minResRX2FFTMEMCtrl_rdAddrReg23;  // ufix11
  reg  minResRX2FFTMEMCtrl_wrEnb01Reg;
  reg  minResRX2FFTMEMCtrl_wrEnb10Reg;
  reg  minResRX2FFTMEMCtrl_wrEnb11Reg;
  reg [10:0] minResRX2FFTMEMCtrl_wrAddr1Dly;  // ufix11
  reg [10:0] minResRX2FFTMEMCtrl_wrAddr2Dly;  // ufix11
  reg  minResRX2FFTMEMCtrl_wrEnb1Dly;
  reg  minResRX2FFTMEMCtrl_wrEnb2Dly;
  reg  minResRX2FFTMEMCtrl_wrEnb3Dly;
  reg [10:0] minResRX2FFTMEMCtrl_cnt1_next;  // ufix11
  reg [10:0] minResRX2FFTMEMCtrl_cnt2_next;  // ufix11
  reg [10:0] minResRX2FFTMEMCtrl_cnt1LSB_next;  // ufix11
  reg [10:0] minResRX2FFTMEMCtrl_cnt2MSB_next;  // ufix11
  reg [10:0] minResRX2FFTMEMCtrl_IC_next;  // ufix11
  reg  minResRX2FFTMEMCtrl_initCnt_next;
  reg  minResRX2FFTMEMCtrl_rdEnb2Dly_next;
  reg  minResRX2FFTMEMCtrl_rdEnb3Dly_next;
  reg [10:0] minResRX2FFTMEMCtrl_wrAddrReg23_next;  // ufix11
  reg [10:0] minResRX2FFTMEMCtrl_wrAddrReg1_next;  // ufix11
  reg [10:0] minResRX2FFTMEMCtrl_rdAddrReg1_next;  // ufix11
  reg [10:0] minResRX2FFTMEMCtrl_rdAddrReg23_next;  // ufix11
  reg  minResRX2FFTMEMCtrl_wrEnb01Reg_next;
  reg  minResRX2FFTMEMCtrl_wrEnb10Reg_next;
  reg  minResRX2FFTMEMCtrl_wrEnb11Reg_next;
  reg [10:0] minResRX2FFTMEMCtrl_wrAddr1Dly_next;  // ufix11
  reg [10:0] minResRX2FFTMEMCtrl_wrAddr2Dly_next;  // ufix11
  reg  minResRX2FFTMEMCtrl_wrEnb1Dly_next;
  reg  minResRX2FFTMEMCtrl_wrEnb2Dly_next;
  reg  minResRX2FFTMEMCtrl_wrEnb3Dly_next;
  reg  wrEnb01;
  reg [10:0] wrAddr01;  // ufix11
  reg [10:0] rdAddr01_tmp;  // ufix11
  reg signed [27:0] dMemOut2_re_1;  // sfix28_En14
  reg signed [27:0] dMemOut2_im_1;  // sfix28_En14
  wire addrBit01_1;
  wire addrBit01_2;
  wire addrBit01_3;
  wire addrBit01_4;
  wire addrBit01_5;
  wire addrBit01_6;
  wire addrBit01_7;
  wire addrBit01_8;
  wire addrBit01_9;
  wire addrBit01_10;
  wire addrBit01_11;
  wire [10:0] rdAddr01_bitRev;  // ufix11
  wire [10:0] rdAddr01;  // ufix11
  reg signed [27:0] intdelay_reg_5 [0:1];  // sfix28 [2]
  wire signed [27:0] intdelay_reg_next_5 [0:1];  // sfix28_En14 [2]
  wire signed [27:0] wrData01Dly_im;  // sfix28_En14


  always @(posedge clk)
    begin : intdelay_process
      if (reset_x == 1'b0) begin
        intdelay_reg[0] <= 28'sb0000000000000000000000000000;
        intdelay_reg[1] <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            intdelay_reg[0] <= 28'sb0000000000000000000000000000;
            intdelay_reg[1] <= 28'sb0000000000000000000000000000;
          end
          else begin
            intdelay_reg[0] <= intdelay_reg_next[0];
            intdelay_reg[1] <= intdelay_reg_next[1];
          end
        end
      end
    end

  assign wrData01Dly_re = intdelay_reg[1];
  assign intdelay_reg_next[0] = dMemIn1_re;
  assign intdelay_reg_next[1] = intdelay_reg[0];



  always @(posedge clk)
    begin : intdelay_1_process
      if (reset_x == 1'b0) begin
        intdelay_reg_1[0] <= 28'sb0000000000000000000000000000;
        intdelay_reg_1[1] <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            intdelay_reg_1[0] <= 28'sb0000000000000000000000000000;
            intdelay_reg_1[1] <= 28'sb0000000000000000000000000000;
          end
          else begin
            intdelay_reg_1[0] <= intdelay_reg_next_1[0];
            intdelay_reg_1[1] <= intdelay_reg_next_1[1];
          end
        end
      end
    end

  assign wrData10Dly_re = intdelay_reg_1[1];
  assign intdelay_reg_next_1[0] = dMemIn2_re;
  assign intdelay_reg_next_1[1] = intdelay_reg_1[0];



  always @(posedge clk)
    begin : intdelay_2_process
      if (reset_x == 1'b0) begin
        intdelay_reg_2[0] <= 28'sb0000000000000000000000000000;
        intdelay_reg_2[1] <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            intdelay_reg_2[0] <= 28'sb0000000000000000000000000000;
            intdelay_reg_2[1] <= 28'sb0000000000000000000000000000;
          end
          else begin
            intdelay_reg_2[0] <= intdelay_reg_next_2[0];
            intdelay_reg_2[1] <= intdelay_reg_next_2[1];
          end
        end
      end
    end

  assign wrData10Dly_im = intdelay_reg_2[1];
  assign intdelay_reg_next_2[0] = dMemIn2_im;
  assign intdelay_reg_next_2[1] = intdelay_reg_2[0];



  always @(posedge clk)
    begin : intdelay_3_process
      if (reset_x == 1'b0) begin
        intdelay_reg_3[0] <= 28'sb0000000000000000000000000000;
        intdelay_reg_3[1] <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            intdelay_reg_3[0] <= 28'sb0000000000000000000000000000;
            intdelay_reg_3[1] <= 28'sb0000000000000000000000000000;
          end
          else begin
            intdelay_reg_3[0] <= intdelay_reg_next_3[0];
            intdelay_reg_3[1] <= intdelay_reg_next_3[1];
          end
        end
      end
    end

  assign wrData11Dly_re = intdelay_reg_3[1];
  assign intdelay_reg_next_3[0] = dMemIn2_re;
  assign intdelay_reg_next_3[1] = intdelay_reg_3[0];



  always @(posedge clk)
    begin : intdelay_4_process
      if (reset_x == 1'b0) begin
        intdelay_reg_4[0] <= 28'sb0000000000000000000000000000;
        intdelay_reg_4[1] <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            intdelay_reg_4[0] <= 28'sb0000000000000000000000000000;
            intdelay_reg_4[1] <= 28'sb0000000000000000000000000000;
          end
          else begin
            intdelay_reg_4[0] <= intdelay_reg_next_4[0];
            intdelay_reg_4[1] <= intdelay_reg_next_4[1];
          end
        end
      end
    end

  assign wrData11Dly_im = intdelay_reg_4[1];
  assign intdelay_reg_next_4[0] = dMemIn2_im;
  assign intdelay_reg_next_4[1] = intdelay_reg_4[0];



  SimpleDualPortRAM_generic #(.AddrWidth(11),
                              .DataWidth(28)
                              )
                            u_dataMEM_im_11 (.clk(clk),
                                             .enb(enb),
                                             .wr_din(wrData11Dly_im),
                                             .wr_addr(wrAddr10),
                                             .wr_en(wrEnb11),
                                             .rd_addr(rdAddr10),
                                             .dout(rdData11_im)
                                             );

  SimpleDualPortRAM_generic #(.AddrWidth(11),
                              .DataWidth(28)
                              )
                            u_dataMEM_re_11 (.clk(clk),
                                             .enb(enb),
                                             .wr_din(wrData11Dly_re),
                                             .wr_addr(wrAddr10),
                                             .wr_en(wrEnb11),
                                             .rd_addr(rdAddr10),
                                             .dout(rdData11_re)
                                             );

  SimpleDualPortRAM_generic #(.AddrWidth(11),
                              .DataWidth(28)
                              )
                            u_dataMEM_im_10 (.clk(clk),
                                             .enb(enb),
                                             .wr_din(wrData10Dly_im),
                                             .wr_addr(wrAddr10),
                                             .wr_en(wrEnb10),
                                             .rd_addr(rdAddr10),
                                             .dout(rdData10_im)
                                             );

  assign addrBit10_11 = rdAddr10_tmp[10];



  assign addrBit10_10 = rdAddr10_tmp[9];



  assign addrBit10_9 = rdAddr10_tmp[8];



  assign addrBit10_8 = rdAddr10_tmp[7];



  assign addrBit10_7 = rdAddr10_tmp[6];



  assign addrBit10_6 = rdAddr10_tmp[5];



  assign addrBit10_5 = rdAddr10_tmp[4];



  assign addrBit10_4 = rdAddr10_tmp[3];



  assign addrBit10_3 = rdAddr10_tmp[2];



  assign addrBit10_2 = rdAddr10_tmp[1];



  assign addrBit10_1 = rdAddr10_tmp[0];



  assign rdAddr10_bitRev = {addrBit10_1, addrBit10_2, addrBit10_3, addrBit10_4, addrBit10_5, addrBit10_6, addrBit10_7, addrBit10_8, addrBit10_9, addrBit10_10, addrBit10_11};



  assign rdAddr10 = (unLoadPhase == 1'b0 ? rdAddr10_tmp :
              rdAddr10_bitRev);



  SimpleDualPortRAM_generic #(.AddrWidth(11),
                              .DataWidth(28)
                              )
                            u_dataMEM_re_10 (.clk(clk),
                                             .enb(enb),
                                             .wr_din(wrData10Dly_re),
                                             .wr_addr(wrAddr10),
                                             .wr_en(wrEnb10),
                                             .rd_addr(rdAddr10),
                                             .dout(rdData10_re)
                                             );

  // minResRX2FFTMEMCtrl
  always @(posedge clk)
    begin : minResRX2FFTMEMCtrl_process
      if (reset_x == 1'b0) begin
        minResRX2FFTMEMCtrl_cnt1 <= 11'b00000000000;
        minResRX2FFTMEMCtrl_cnt2 <= 11'b00000000000;
        minResRX2FFTMEMCtrl_cnt1LSB <= 11'b00000000000;
        minResRX2FFTMEMCtrl_cnt2MSB <= 11'b00000000000;
        minResRX2FFTMEMCtrl_wrAddrReg23 <= 11'b00000000000;
        minResRX2FFTMEMCtrl_wrAddrReg1 <= 11'b00000000000;
        minResRX2FFTMEMCtrl_wrAddr1Dly <= 11'b00000000000;
        minResRX2FFTMEMCtrl_wrAddr2Dly <= 11'b00000000000;
        minResRX2FFTMEMCtrl_rdAddrReg23 <= 11'b00000000000;
        minResRX2FFTMEMCtrl_rdAddrReg1 <= 11'b00000000000;
        minResRX2FFTMEMCtrl_IC <= 11'b00000000000;
        minResRX2FFTMEMCtrl_wrEnb01Reg <= 1'b0;
        minResRX2FFTMEMCtrl_wrEnb10Reg <= 1'b0;
        minResRX2FFTMEMCtrl_wrEnb11Reg <= 1'b0;
        minResRX2FFTMEMCtrl_wrEnb1Dly <= 1'b0;
        minResRX2FFTMEMCtrl_wrEnb2Dly <= 1'b0;
        minResRX2FFTMEMCtrl_wrEnb3Dly <= 1'b0;
        minResRX2FFTMEMCtrl_initCnt <= 1'b0;
        minResRX2FFTMEMCtrl_rdEnb2Dly <= 1'b0;
        minResRX2FFTMEMCtrl_rdEnb3Dly <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            minResRX2FFTMEMCtrl_cnt1 <= 11'b00000000000;
            minResRX2FFTMEMCtrl_cnt2 <= 11'b00000000000;
            minResRX2FFTMEMCtrl_cnt1LSB <= 11'b00000000000;
            minResRX2FFTMEMCtrl_cnt2MSB <= 11'b00000000000;
            minResRX2FFTMEMCtrl_wrAddrReg23 <= 11'b00000000000;
            minResRX2FFTMEMCtrl_wrAddrReg1 <= 11'b00000000000;
            minResRX2FFTMEMCtrl_wrAddr1Dly <= 11'b00000000000;
            minResRX2FFTMEMCtrl_wrAddr2Dly <= 11'b00000000000;
            minResRX2FFTMEMCtrl_rdAddrReg23 <= 11'b00000000000;
            minResRX2FFTMEMCtrl_rdAddrReg1 <= 11'b00000000000;
            minResRX2FFTMEMCtrl_IC <= 11'b00000000000;
            minResRX2FFTMEMCtrl_wrEnb01Reg <= 1'b0;
            minResRX2FFTMEMCtrl_wrEnb10Reg <= 1'b0;
            minResRX2FFTMEMCtrl_wrEnb11Reg <= 1'b0;
            minResRX2FFTMEMCtrl_wrEnb1Dly <= 1'b0;
            minResRX2FFTMEMCtrl_wrEnb2Dly <= 1'b0;
            minResRX2FFTMEMCtrl_wrEnb3Dly <= 1'b0;
            minResRX2FFTMEMCtrl_initCnt <= 1'b0;
            minResRX2FFTMEMCtrl_rdEnb2Dly <= 1'b0;
            minResRX2FFTMEMCtrl_rdEnb3Dly <= 1'b0;
          end
          else begin
            minResRX2FFTMEMCtrl_cnt1 <= minResRX2FFTMEMCtrl_cnt1_next;
            minResRX2FFTMEMCtrl_cnt2 <= minResRX2FFTMEMCtrl_cnt2_next;
            minResRX2FFTMEMCtrl_cnt1LSB <= minResRX2FFTMEMCtrl_cnt1LSB_next;
            minResRX2FFTMEMCtrl_cnt2MSB <= minResRX2FFTMEMCtrl_cnt2MSB_next;
            minResRX2FFTMEMCtrl_IC <= minResRX2FFTMEMCtrl_IC_next;
            minResRX2FFTMEMCtrl_initCnt <= minResRX2FFTMEMCtrl_initCnt_next;
            minResRX2FFTMEMCtrl_rdEnb2Dly <= minResRX2FFTMEMCtrl_rdEnb2Dly_next;
            minResRX2FFTMEMCtrl_rdEnb3Dly <= minResRX2FFTMEMCtrl_rdEnb3Dly_next;
            minResRX2FFTMEMCtrl_wrAddrReg23 <= minResRX2FFTMEMCtrl_wrAddrReg23_next;
            minResRX2FFTMEMCtrl_wrAddrReg1 <= minResRX2FFTMEMCtrl_wrAddrReg1_next;
            minResRX2FFTMEMCtrl_rdAddrReg1 <= minResRX2FFTMEMCtrl_rdAddrReg1_next;
            minResRX2FFTMEMCtrl_rdAddrReg23 <= minResRX2FFTMEMCtrl_rdAddrReg23_next;
            minResRX2FFTMEMCtrl_wrEnb01Reg <= minResRX2FFTMEMCtrl_wrEnb01Reg_next;
            minResRX2FFTMEMCtrl_wrEnb10Reg <= minResRX2FFTMEMCtrl_wrEnb10Reg_next;
            minResRX2FFTMEMCtrl_wrEnb11Reg <= minResRX2FFTMEMCtrl_wrEnb11Reg_next;
            minResRX2FFTMEMCtrl_wrAddr1Dly <= minResRX2FFTMEMCtrl_wrAddr1Dly_next;
            minResRX2FFTMEMCtrl_wrAddr2Dly <= minResRX2FFTMEMCtrl_wrAddr2Dly_next;
            minResRX2FFTMEMCtrl_wrEnb1Dly <= minResRX2FFTMEMCtrl_wrEnb1Dly_next;
            minResRX2FFTMEMCtrl_wrEnb2Dly <= minResRX2FFTMEMCtrl_wrEnb2Dly_next;
            minResRX2FFTMEMCtrl_wrEnb3Dly <= minResRX2FFTMEMCtrl_wrEnb3Dly_next;
          end
        end
      end
    end

  always @(initIC, minResRX2FFTMEMCtrl_IC, minResRX2FFTMEMCtrl_cnt1,
       minResRX2FFTMEMCtrl_cnt1LSB, minResRX2FFTMEMCtrl_cnt2,
       minResRX2FFTMEMCtrl_cnt2MSB, minResRX2FFTMEMCtrl_initCnt,
       minResRX2FFTMEMCtrl_rdAddrReg1, minResRX2FFTMEMCtrl_rdAddrReg23,
       minResRX2FFTMEMCtrl_rdEnb2Dly, minResRX2FFTMEMCtrl_rdEnb3Dly,
       minResRX2FFTMEMCtrl_wrAddr1Dly, minResRX2FFTMEMCtrl_wrAddr2Dly,
       minResRX2FFTMEMCtrl_wrAddrReg1, minResRX2FFTMEMCtrl_wrAddrReg23,
       minResRX2FFTMEMCtrl_wrEnb01Reg, minResRX2FFTMEMCtrl_wrEnb10Reg,
       minResRX2FFTMEMCtrl_wrEnb11Reg, minResRX2FFTMEMCtrl_wrEnb1Dly,
       minResRX2FFTMEMCtrl_wrEnb2Dly, minResRX2FFTMEMCtrl_wrEnb3Dly,
       rdData10_im, rdData10_re, rdData11_im, rdData11_re, rdEnb1, rdEnb2,
       rdEnb3, stage, wrEnb1, wrEnb2, wrEnb3) begin
    minResRX2FFTMEMCtrl_cnt1_next = minResRX2FFTMEMCtrl_cnt1;
    minResRX2FFTMEMCtrl_cnt2_next = minResRX2FFTMEMCtrl_cnt2;
    minResRX2FFTMEMCtrl_IC_next = minResRX2FFTMEMCtrl_IC;
    minResRX2FFTMEMCtrl_wrAddrReg1_next = minResRX2FFTMEMCtrl_wrAddrReg1;
    minResRX2FFTMEMCtrl_rdAddrReg1_next = minResRX2FFTMEMCtrl_rdAddrReg1;
    minResRX2FFTMEMCtrl_rdAddrReg23_next = minResRX2FFTMEMCtrl_rdAddrReg23;
    minResRX2FFTMEMCtrl_wrAddr2Dly_next = minResRX2FFTMEMCtrl_wrAddr1Dly;
    minResRX2FFTMEMCtrl_wrEnb01Reg_next = minResRX2FFTMEMCtrl_wrEnb1Dly;
    minResRX2FFTMEMCtrl_wrEnb1Dly_next = wrEnb1;
    minResRX2FFTMEMCtrl_wrEnb10Reg_next = minResRX2FFTMEMCtrl_wrEnb2Dly;
    minResRX2FFTMEMCtrl_wrEnb2Dly_next = wrEnb2;
    minResRX2FFTMEMCtrl_wrEnb11Reg_next = minResRX2FFTMEMCtrl_wrEnb3Dly;
    minResRX2FFTMEMCtrl_wrEnb3Dly_next = wrEnb3;
    if (minResRX2FFTMEMCtrl_rdEnb2Dly) begin
      dMemOut2_re_1 = rdData10_re;
      dMemOut2_im_1 = rdData10_im;
    end
    else if (minResRX2FFTMEMCtrl_rdEnb3Dly) begin
      dMemOut2_re_1 = rdData11_re;
      dMemOut2_im_1 = rdData11_im;
    end
    else begin
      dMemOut2_re_1 = 28'sb0000000000000000000000000000;
      dMemOut2_im_1 = 28'sb0000000000000000000000000000;
    end
    minResRX2FFTMEMCtrl_rdEnb2Dly_next = rdEnb2;
    minResRX2FFTMEMCtrl_rdEnb3Dly_next = rdEnb3;
    if (rdEnb1) begin
      minResRX2FFTMEMCtrl_rdAddrReg1_next = minResRX2FFTMEMCtrl_rdAddrReg1 + 11'b00000000001;
    end
    if (rdEnb2 || rdEnb3) begin
      minResRX2FFTMEMCtrl_rdAddrReg23_next = minResRX2FFTMEMCtrl_rdAddrReg23 + 11'b00000000001;
    end
    case ( stage)
      4'b0000 :
        begin
          minResRX2FFTMEMCtrl_wrAddrReg23_next = minResRX2FFTMEMCtrl_cnt1LSB;
        end
      4'b0001 :
        begin
          minResRX2FFTMEMCtrl_wrAddrReg23_next = {minResRX2FFTMEMCtrl_cnt2MSB[10], minResRX2FFTMEMCtrl_cnt1LSB[9:0]};
        end
      4'b0010 :
        begin
          minResRX2FFTMEMCtrl_wrAddrReg23_next = {minResRX2FFTMEMCtrl_cnt2MSB[10:9], minResRX2FFTMEMCtrl_cnt1LSB[8:0]};
        end
      4'b0011 :
        begin
          minResRX2FFTMEMCtrl_wrAddrReg23_next = {minResRX2FFTMEMCtrl_cnt2MSB[10:8], minResRX2FFTMEMCtrl_cnt1LSB[7:0]};
        end
      4'b0100 :
        begin
          minResRX2FFTMEMCtrl_wrAddrReg23_next = {minResRX2FFTMEMCtrl_cnt2MSB[10:7], minResRX2FFTMEMCtrl_cnt1LSB[6:0]};
        end
      4'b0101 :
        begin
          minResRX2FFTMEMCtrl_wrAddrReg23_next = {minResRX2FFTMEMCtrl_cnt2MSB[10:6], minResRX2FFTMEMCtrl_cnt1LSB[5:0]};
        end
      4'b0110 :
        begin
          minResRX2FFTMEMCtrl_wrAddrReg23_next = {minResRX2FFTMEMCtrl_cnt2MSB[10:5], minResRX2FFTMEMCtrl_cnt1LSB[4:0]};
        end
      4'b0111 :
        begin
          minResRX2FFTMEMCtrl_wrAddrReg23_next = {minResRX2FFTMEMCtrl_cnt2MSB[10:4], minResRX2FFTMEMCtrl_cnt1LSB[3:0]};
        end
      4'b1000 :
        begin
          minResRX2FFTMEMCtrl_wrAddrReg23_next = {minResRX2FFTMEMCtrl_cnt2MSB[10:3], minResRX2FFTMEMCtrl_cnt1LSB[2:0]};
        end
      4'b1001 :
        begin
          minResRX2FFTMEMCtrl_wrAddrReg23_next = {minResRX2FFTMEMCtrl_cnt2MSB[10:2], minResRX2FFTMEMCtrl_cnt1LSB[1:0]};
        end
      4'b1010 :
        begin
          minResRX2FFTMEMCtrl_wrAddrReg23_next = {minResRX2FFTMEMCtrl_cnt2MSB[10:1], minResRX2FFTMEMCtrl_cnt1LSB[0]};
        end
      4'b1011 :
        begin
          minResRX2FFTMEMCtrl_wrAddrReg23_next = minResRX2FFTMEMCtrl_cnt2MSB;
        end
      default :
        begin
          minResRX2FFTMEMCtrl_wrAddrReg23_next = 11'b00000000000;
        end
    endcase
    minResRX2FFTMEMCtrl_cnt1LSB_next = minResRX2FFTMEMCtrl_cnt1;
    minResRX2FFTMEMCtrl_cnt2MSB_next = minResRX2FFTMEMCtrl_cnt2;
    minResRX2FFTMEMCtrl_wrAddr1Dly_next = minResRX2FFTMEMCtrl_wrAddrReg1;
    if (wrEnb1) begin
      minResRX2FFTMEMCtrl_wrAddrReg1_next = minResRX2FFTMEMCtrl_wrAddrReg1 + 11'b00000000001;
    end
    if (minResRX2FFTMEMCtrl_initCnt) begin
      minResRX2FFTMEMCtrl_cnt1_next = minResRX2FFTMEMCtrl_IC;
      minResRX2FFTMEMCtrl_cnt2_next = 11'b00000000000;
    end
    else if (wrEnb2 || wrEnb3) begin
      minResRX2FFTMEMCtrl_cnt1_next = minResRX2FFTMEMCtrl_cnt1 + 11'b00000000001;
      minResRX2FFTMEMCtrl_cnt2_next = minResRX2FFTMEMCtrl_cnt2 + 11'b00000000001;
    end
    if (initIC) begin
      case ( stage)
        4'b0000 :
          begin
            minResRX2FFTMEMCtrl_IC_next = 11'b10000000000;
          end
        default :
          begin
            minResRX2FFTMEMCtrl_IC_next = minResRX2FFTMEMCtrl_IC >> 8'd1;
          end
      endcase
    end
    minResRX2FFTMEMCtrl_initCnt_next = initIC;
    wrEnb01 = minResRX2FFTMEMCtrl_wrEnb01Reg;
    wrEnb10 = minResRX2FFTMEMCtrl_wrEnb10Reg;
    wrEnb11 = minResRX2FFTMEMCtrl_wrEnb11Reg;
    wrAddr01 = minResRX2FFTMEMCtrl_wrAddr2Dly;
    wrAddr10 = minResRX2FFTMEMCtrl_wrAddrReg23;
    rdAddr01_tmp = minResRX2FFTMEMCtrl_rdAddrReg1;
    rdAddr10_tmp = minResRX2FFTMEMCtrl_rdAddrReg23;
  end



  assign addrBit01_1 = rdAddr01_tmp[0];



  assign addrBit01_2 = rdAddr01_tmp[1];



  assign addrBit01_3 = rdAddr01_tmp[2];



  assign addrBit01_4 = rdAddr01_tmp[3];



  assign addrBit01_5 = rdAddr01_tmp[4];



  assign addrBit01_6 = rdAddr01_tmp[5];



  assign addrBit01_7 = rdAddr01_tmp[6];



  assign addrBit01_8 = rdAddr01_tmp[7];



  assign addrBit01_9 = rdAddr01_tmp[8];



  assign addrBit01_10 = rdAddr01_tmp[9];



  assign addrBit01_11 = rdAddr01_tmp[10];



  assign rdAddr01_bitRev = {addrBit01_1, addrBit01_2, addrBit01_3, addrBit01_4, addrBit01_5, addrBit01_6, addrBit01_7, addrBit01_8, addrBit01_9, addrBit01_10, addrBit01_11};



  assign rdAddr01 = (unLoadPhase == 1'b0 ? rdAddr01_tmp :
              rdAddr01_bitRev);



  SimpleDualPortRAM_generic #(.AddrWidth(11),
                              .DataWidth(28)
                              )
                            u_dataMEM_re_01_generic (.clk(clk),
                                                     .enb(enb),
                                                     .wr_din(wrData01Dly_re),
                                                     .wr_addr(wrAddr01),
                                                     .wr_en(wrEnb01),
                                                     .rd_addr(rdAddr01),
                                                     .dout(dMemOut1_re)
                                                     );

  always @(posedge clk)
    begin : intdelay_5_process
      if (reset_x == 1'b0) begin
        intdelay_reg_5[0] <= 28'sb0000000000000000000000000000;
        intdelay_reg_5[1] <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            intdelay_reg_5[0] <= 28'sb0000000000000000000000000000;
            intdelay_reg_5[1] <= 28'sb0000000000000000000000000000;
          end
          else begin
            intdelay_reg_5[0] <= intdelay_reg_next_5[0];
            intdelay_reg_5[1] <= intdelay_reg_next_5[1];
          end
        end
      end
    end

  assign wrData01Dly_im = intdelay_reg_5[1];
  assign intdelay_reg_next_5[0] = dMemIn1_im;
  assign intdelay_reg_next_5[1] = intdelay_reg_5[0];



  SimpleDualPortRAM_generic #(.AddrWidth(11),
                              .DataWidth(28)
                              )
                            u_dataMEM_im_01 (.clk(clk),
                                             .enb(enb),
                                             .wr_din(wrData01Dly_im),
                                             .wr_addr(wrAddr01),
                                             .wr_en(wrEnb01),
                                             .rd_addr(rdAddr01),
                                             .dout(dMemOut1_im)
                                             );

  assign dMemOut2_re = dMemOut2_re_1;

  assign dMemOut2_im = dMemOut2_im_1;

endmodule  // MINRESRX2FFT_MEMORY

