// -------------------------------------------------------------
// 
// File Name: DUAL_port_RAM_and_GA3\hdlsrc\DUALportRAMinterface_v3\alpha16bLFSR.v
// Created: 2024-05-04 07:38:48
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: alpha16bLFSR
// Source Path: DUALportRAMinterface_v3/PL/integration_block1/Subsystem/16bLFSR
// Hierarchy Level: 3
// Model version: 1.38
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module alpha16bLFSR
          (clk,
           reset_x,
           enb,
           In1,
           y_port,
           y1,
           y2,
           y3,
           y4,
           y5,
           y6,
           y7,
           y8,
           y9,
           y10,
           y11,
           y12,
           y13,
           y14,
           y15);


  input   clk;
  input   reset_x;
  input   enb;
  input   In1;
  output  y_port;
  output  y1;
  output  y2;
  output  y3;
  output  y4;
  output  y5;
  output  y6;
  output  y7;
  output  y8;
  output  y9;
  output  y10;
  output  y11;
  output  y12;
  output  y13;
  output  y14;
  output  y15;


  wire switch_compare_1;
  wire switch_compare_1_1;
  wire switch_compare_1_2;
  wire switch_compare_1_3;
  wire switch_compare_1_4;
  wire switch_compare_1_5;
  wire switch_compare_1_6;
  wire switch_compare_1_7;
  wire switch_compare_1_8;
  wire switch_compare_1_9;
  wire switch_compare_1_10;
  wire switch_compare_1_11;
  wire switch_compare_1_12;
  wire switch_compare_1_13;
  wire switch_compare_1_14;
  wire switch_compare_1_15;
  wire alpha2_ss_out1;
  wire Switch14_out1;
  wire alpha1_ss_out1;
  wire Switch15_out1;
  wire alpha16_out1;
  wire alpha3_ss_out1;
  wire Switch13_out1;
  wire Logical_Operator_out1;
  wire alpha5_ss_out1;
  wire Switch11_out1;
  wire alpha4_ss_out1;
  wire Switch12_out1;
  wire Logical_Operator1_out1;
  wire alpha15_out1;
  wire Switch1_out1;
  wire alpha14_out1;
  wire Switch2_out1;
  wire alpha13_out1;
  wire Switch3_out1;
  wire alpha12_out1;
  wire Switch4_out1;
  wire alpha11_out1;
  wire Switch5_out1;
  wire alpha10_out1;
  wire Switch6_out1;
  wire alpha9_ss_out1;
  wire Switch7_out1;
  wire alpha8_ss_out1;
  wire Switch8_out1;
  wire alpha7_ss_out1;
  wire Switch9_out1;
  wire alpha6_ss_out1;
  wire Switch10_out1;
  wire Logical_Operator2_out1;
  wire Switch_out1;


  assign switch_compare_1 = In1 > 1'b0;



  assign switch_compare_1_1 = In1 > 1'b0;



  assign switch_compare_1_2 = In1 > 1'b0;



  assign switch_compare_1_3 = In1 > 1'b0;



  assign switch_compare_1_4 = In1 > 1'b0;



  assign switch_compare_1_5 = In1 > 1'b0;



  assign switch_compare_1_6 = In1 > 1'b0;



  assign switch_compare_1_7 = In1 > 1'b0;



  assign switch_compare_1_8 = In1 > 1'b0;



  assign switch_compare_1_9 = In1 > 1'b0;



  assign switch_compare_1_10 = In1 > 1'b0;



  assign switch_compare_1_11 = In1 > 1'b0;



  assign switch_compare_1_12 = In1 > 1'b0;



  assign switch_compare_1_13 = In1 > 1'b0;



  assign switch_compare_1_14 = In1 > 1'b0;



  assign switch_compare_1_15 = In1 > 1'b0;



  assign Switch14_out1 = (switch_compare_1_15 == 1'b0 ? alpha2_ss_out1 :
              1'b0);



  alpha1_ss u_1_ss (.clk(clk),
                    .reset_x(reset_x),
                    .enb(enb),
                    .reg_in(Switch14_out1),
                    .reg_out(alpha1_ss_out1)
                    );

  assign Switch15_out1 = (switch_compare_1_14 == 1'b0 ? alpha1_ss_out1 :
              1'b1);



  alpha16 u_16 (.clk(clk),
                .reset_x(reset_x),
                .enb(enb),
                .reg_in(Switch15_out1),
                .reg_out(alpha16_out1)
                );

  assign Switch13_out1 = (switch_compare_1_13 == 1'b0 ? alpha3_ss_out1 :
              1'b0);



  alpha2_ss u_2_ss (.clk(clk),
                    .reset_x(reset_x),
                    .enb(enb),
                    .reg_in(Switch13_out1),
                    .reg_out(alpha2_ss_out1)
                    );

  assign Logical_Operator_out1 = alpha2_ss_out1 ^ alpha16_out1;



  assign Switch11_out1 = (switch_compare_1_12 == 1'b0 ? alpha5_ss_out1 :
              1'b0);



  alpha4_ss u_4_ss (.clk(clk),
                    .reset_x(reset_x),
                    .enb(enb),
                    .reg_in(Switch11_out1),
                    .reg_out(alpha4_ss_out1)
                    );

  assign Switch12_out1 = (switch_compare_1_11 == 1'b0 ? alpha4_ss_out1 :
              1'b0);



  alpha3_ss u_3_ss (.clk(clk),
                    .reset_x(reset_x),
                    .enb(enb),
                    .reg_in(Switch12_out1),
                    .reg_out(alpha3_ss_out1)
                    );

  assign Logical_Operator1_out1 = alpha3_ss_out1 ^ Logical_Operator_out1;



  assign Switch1_out1 = (switch_compare_1_10 == 1'b0 ? alpha15_out1 :
              1'b0);



  alpha14 u_14 (.clk(clk),
                .reset_x(reset_x),
                .enb(enb),
                .reg_in(Switch1_out1),
                .reg_out(alpha14_out1)
                );

  assign Switch2_out1 = (switch_compare_1_9 == 1'b0 ? alpha14_out1 :
              1'b1);



  alpha13 u_13 (.clk(clk),
                .reset_x(reset_x),
                .enb(enb),
                .reg_in(Switch2_out1),
                .reg_out(alpha13_out1)
                );

  assign Switch3_out1 = (switch_compare_1_8 == 1'b0 ? alpha13_out1 :
              1'b0);



  alpha12 u_12 (.clk(clk),
                .reset_x(reset_x),
                .enb(enb),
                .reg_in(Switch3_out1),
                .reg_out(alpha12_out1)
                );

  assign Switch4_out1 = (switch_compare_1_7 == 1'b0 ? alpha12_out1 :
              1'b1);



  alpha11 u_11 (.clk(clk),
                .reset_x(reset_x),
                .enb(enb),
                .reg_in(Switch4_out1),
                .reg_out(alpha11_out1)
                );

  assign Switch5_out1 = (switch_compare_1_6 == 1'b0 ? alpha11_out1 :
              1'b1);



  alpha10 u_10 (.clk(clk),
                .reset_x(reset_x),
                .enb(enb),
                .reg_in(Switch5_out1),
                .reg_out(alpha10_out1)
                );

  assign Switch6_out1 = (switch_compare_1_5 == 1'b0 ? alpha10_out1 :
              1'b0);



  alpha9_ss u_9_ss (.clk(clk),
                    .reset_x(reset_x),
                    .enb(enb),
                    .reg_in(Switch6_out1),
                    .reg_out(alpha9_ss_out1)
                    );

  assign Switch7_out1 = (switch_compare_1_4 == 1'b0 ? alpha9_ss_out1 :
              1'b0);



  alpha8_ss u_8_ss (.clk(clk),
                    .reset_x(reset_x),
                    .enb(enb),
                    .reg_in(Switch7_out1),
                    .reg_out(alpha8_ss_out1)
                    );

  assign Switch8_out1 = (switch_compare_1_3 == 1'b0 ? alpha8_ss_out1 :
              1'b1);



  alpha7_ss u_7_ss (.clk(clk),
                    .reset_x(reset_x),
                    .enb(enb),
                    .reg_in(Switch8_out1),
                    .reg_out(alpha7_ss_out1)
                    );

  assign Switch9_out1 = (switch_compare_1_2 == 1'b0 ? alpha7_ss_out1 :
              1'b1);



  alpha6_ss u_6_ss (.clk(clk),
                    .reset_x(reset_x),
                    .enb(enb),
                    .reg_in(Switch9_out1),
                    .reg_out(alpha6_ss_out1)
                    );

  assign Switch10_out1 = (switch_compare_1_1 == 1'b0 ? alpha6_ss_out1 :
              1'b1);



  alpha5_ss u_5_ss (.clk(clk),
                    .reset_x(reset_x),
                    .enb(enb),
                    .reg_in(Switch10_out1),
                    .reg_out(alpha5_ss_out1)
                    );

  assign Logical_Operator2_out1 = alpha5_ss_out1 ^ Logical_Operator1_out1;



  assign Switch_out1 = (switch_compare_1 == 1'b0 ? Logical_Operator2_out1 :
              1'b1);



  alpha15 u_15 (.clk(clk),
                .reset_x(reset_x),
                .enb(enb),
                .reg_in(Switch_out1),
                .reg_out(alpha15_out1)
                );

  assign y_port = alpha15_out1;

  assign y1 = alpha14_out1;

  assign y2 = alpha13_out1;

  assign y3 = alpha12_out1;

  assign y4 = alpha11_out1;

  assign y5 = alpha10_out1;

  assign y6 = alpha9_ss_out1;

  assign y7 = alpha8_ss_out1;

  assign y8 = alpha7_ss_out1;

  assign y9 = alpha6_ss_out1;

  assign y10 = alpha5_ss_out1;

  assign y11 = alpha4_ss_out1;

  assign y12 = alpha3_ss_out1;

  assign y13 = alpha2_ss_out1;

  assign y14 = alpha1_ss_out1;

  assign y15 = alpha16_out1;

endmodule  // alpha16bLFSR

