// -------------------------------------------------------------
// 
// File Name: DUAL_port_RAM_and_GA3\hdlsrc\DUALportRAMinterface_v3\MINRESRX2FFT_BTFSEL.v
// Created: 2024-05-04 07:38:48
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: MINRESRX2FFT_BTFSEL
// Source Path: DUALportRAMinterface_v3/PL/integration_block1/FFT/MINRESRX2FFT_BTFSEL
// Hierarchy Level: 3
// Model version: 1.38
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module MINRESRX2FFT_BTFSEL
          (clk,
           reset_x,
           enb,
           din_1_re,
           din_1_im,
           validIn,
           rdy,
           dMemOut1_re,
           dMemOut1_im,
           dMemOut2_re,
           dMemOut2_im,
           dMemOut_vld,
           stage,
           initIC,
           syncReset,
           btfIn1_re,
           btfIn1_im,
           btfIn2_re,
           btfIn2_im,
           btfIn_vld);


  input   clk;
  input   reset_x;
  input   enb;
  input   signed [27:0] din_1_re;  // sfix28_En14
  input   signed [27:0] din_1_im;  // sfix28_En14
  input   validIn;
  input   rdy;
  input   signed [27:0] dMemOut1_re;  // sfix28_En14
  input   signed [27:0] dMemOut1_im;  // sfix28_En14
  input   signed [27:0] dMemOut2_re;  // sfix28_En14
  input   signed [27:0] dMemOut2_im;  // sfix28_En14
  input   dMemOut_vld;
  input   [3:0] stage;  // ufix4
  input   initIC;
  input   syncReset;
  output  signed [27:0] btfIn1_re;  // sfix28_En14
  output  signed [27:0] btfIn1_im;  // sfix28_En14
  output  signed [27:0] btfIn2_re;  // sfix28_En14
  output  signed [27:0] btfIn2_im;  // sfix28_En14
  output  btfIn_vld;


  reg signed [27:0] minResRX2FFTBTFSEL_btfIn1Reg_re;  // sfix28
  reg signed [27:0] minResRX2FFTBTFSEL_btfIn1Reg_im;  // sfix28
  reg signed [27:0] minResRX2FFTBTFSEL_btfIn2Reg_re;  // sfix28
  reg signed [27:0] minResRX2FFTBTFSEL_btfIn2Reg_im;  // sfix28
  reg  minResRX2FFTBTFSEL_btfInReg_vld;
  reg [10:0] minResRX2FFTBTFSEL_cnt;  // ufix11
  reg [10:0] minResRX2FFTBTFSEL_cntMax;  // ufix11
  reg  minResRX2FFTBTFSEL_muxSel;
  reg signed [27:0] minResRX2FFTBTFSEL_dinReg1_re;  // sfix28
  reg signed [27:0] minResRX2FFTBTFSEL_dinReg1_im;  // sfix28
  reg signed [27:0] minResRX2FFTBTFSEL_dinReg2_re;  // sfix28
  reg signed [27:0] minResRX2FFTBTFSEL_dinReg2_im;  // sfix28
  reg signed [27:0] minResRX2FFTBTFSEL_dinReg3_re;  // sfix28
  reg signed [27:0] minResRX2FFTBTFSEL_dinReg3_im;  // sfix28
  reg signed [27:0] minResRX2FFTBTFSEL_dMemOut1Reg_re;  // sfix28
  reg signed [27:0] minResRX2FFTBTFSEL_dMemOut1Reg_im;  // sfix28
  reg signed [27:0] minResRX2FFTBTFSEL_dMemOut2Reg_re;  // sfix28
  reg signed [27:0] minResRX2FFTBTFSEL_dMemOut2Reg_im;  // sfix28
  reg  minResRX2FFTBTFSEL_dMemOutReg_vld;
  reg signed [27:0] minResRX2FFTBTFSEL_btfIn1Reg_re_next;  // sfix28_En14
  reg signed [27:0] minResRX2FFTBTFSEL_btfIn1Reg_im_next;  // sfix28_En14
  reg signed [27:0] minResRX2FFTBTFSEL_btfIn2Reg_re_next;  // sfix28_En14
  reg signed [27:0] minResRX2FFTBTFSEL_btfIn2Reg_im_next;  // sfix28_En14
  reg  minResRX2FFTBTFSEL_btfInReg_vld_next;
  reg [10:0] minResRX2FFTBTFSEL_cnt_next;  // ufix11
  reg [10:0] minResRX2FFTBTFSEL_cntMax_next;  // ufix11
  reg  minResRX2FFTBTFSEL_muxSel_next;
  reg signed [27:0] minResRX2FFTBTFSEL_dinReg1_re_next;  // sfix28_En14
  reg signed [27:0] minResRX2FFTBTFSEL_dinReg1_im_next;  // sfix28_En14
  reg signed [27:0] minResRX2FFTBTFSEL_dinReg2_re_next;  // sfix28_En14
  reg signed [27:0] minResRX2FFTBTFSEL_dinReg2_im_next;  // sfix28_En14
  reg signed [27:0] minResRX2FFTBTFSEL_dinReg3_re_next;  // sfix28_En14
  reg signed [27:0] minResRX2FFTBTFSEL_dinReg3_im_next;  // sfix28_En14
  reg signed [27:0] minResRX2FFTBTFSEL_dMemOut1Reg_re_next;  // sfix28_En14
  reg signed [27:0] minResRX2FFTBTFSEL_dMemOut1Reg_im_next;  // sfix28_En14
  reg signed [27:0] minResRX2FFTBTFSEL_dMemOut2Reg_re_next;  // sfix28_En14
  reg signed [27:0] minResRX2FFTBTFSEL_dMemOut2Reg_im_next;  // sfix28_En14
  reg  minResRX2FFTBTFSEL_dMemOutReg_vld_next;
  reg signed [27:0] btfIn1_re_1;  // sfix28_En14
  reg signed [27:0] btfIn1_im_1;  // sfix28_En14
  reg signed [27:0] btfIn2_re_1;  // sfix28_En14
  reg signed [27:0] btfIn2_im_1;  // sfix28_En14
  reg  btfIn_vld_1;


  // minResRX2FFTBTFSEL
  always @(posedge clk)
    begin : minResRX2FFTBTFSEL_process
      if (reset_x == 1'b0) begin
        minResRX2FFTBTFSEL_btfIn1Reg_re <= 28'sb0000000000000000000000000000;
        minResRX2FFTBTFSEL_btfIn1Reg_im <= 28'sb0000000000000000000000000000;
        minResRX2FFTBTFSEL_btfIn2Reg_re <= 28'sb0000000000000000000000000000;
        minResRX2FFTBTFSEL_btfIn2Reg_im <= 28'sb0000000000000000000000000000;
        minResRX2FFTBTFSEL_dinReg1_re <= 28'sb0000000000000000000000000000;
        minResRX2FFTBTFSEL_dinReg1_im <= 28'sb0000000000000000000000000000;
        minResRX2FFTBTFSEL_dinReg2_re <= 28'sb0000000000000000000000000000;
        minResRX2FFTBTFSEL_dinReg2_im <= 28'sb0000000000000000000000000000;
        minResRX2FFTBTFSEL_dinReg3_re <= 28'sb0000000000000000000000000000;
        minResRX2FFTBTFSEL_dinReg3_im <= 28'sb0000000000000000000000000000;
        minResRX2FFTBTFSEL_dMemOut1Reg_re <= 28'sb0000000000000000000000000000;
        minResRX2FFTBTFSEL_dMemOut1Reg_im <= 28'sb0000000000000000000000000000;
        minResRX2FFTBTFSEL_dMemOut2Reg_re <= 28'sb0000000000000000000000000000;
        minResRX2FFTBTFSEL_dMemOut2Reg_im <= 28'sb0000000000000000000000000000;
        minResRX2FFTBTFSEL_cnt <= 11'b00000000000;
        minResRX2FFTBTFSEL_cntMax <= 11'b00000000000;
        minResRX2FFTBTFSEL_muxSel <= 1'b0;
        minResRX2FFTBTFSEL_btfInReg_vld <= 1'b0;
        minResRX2FFTBTFSEL_dMemOutReg_vld <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            minResRX2FFTBTFSEL_btfIn1Reg_re <= 28'sb0000000000000000000000000000;
            minResRX2FFTBTFSEL_btfIn1Reg_im <= 28'sb0000000000000000000000000000;
            minResRX2FFTBTFSEL_btfIn2Reg_re <= 28'sb0000000000000000000000000000;
            minResRX2FFTBTFSEL_btfIn2Reg_im <= 28'sb0000000000000000000000000000;
            minResRX2FFTBTFSEL_dinReg1_re <= 28'sb0000000000000000000000000000;
            minResRX2FFTBTFSEL_dinReg1_im <= 28'sb0000000000000000000000000000;
            minResRX2FFTBTFSEL_dinReg2_re <= 28'sb0000000000000000000000000000;
            minResRX2FFTBTFSEL_dinReg2_im <= 28'sb0000000000000000000000000000;
            minResRX2FFTBTFSEL_dinReg3_re <= 28'sb0000000000000000000000000000;
            minResRX2FFTBTFSEL_dinReg3_im <= 28'sb0000000000000000000000000000;
            minResRX2FFTBTFSEL_dMemOut1Reg_re <= 28'sb0000000000000000000000000000;
            minResRX2FFTBTFSEL_dMemOut1Reg_im <= 28'sb0000000000000000000000000000;
            minResRX2FFTBTFSEL_dMemOut2Reg_re <= 28'sb0000000000000000000000000000;
            minResRX2FFTBTFSEL_dMemOut2Reg_im <= 28'sb0000000000000000000000000000;
            minResRX2FFTBTFSEL_cnt <= 11'b00000000000;
            minResRX2FFTBTFSEL_cntMax <= 11'b00000000000;
            minResRX2FFTBTFSEL_muxSel <= 1'b0;
            minResRX2FFTBTFSEL_btfInReg_vld <= 1'b0;
            minResRX2FFTBTFSEL_dMemOutReg_vld <= 1'b0;
          end
          else begin
            minResRX2FFTBTFSEL_btfIn1Reg_re <= minResRX2FFTBTFSEL_btfIn1Reg_re_next;
            minResRX2FFTBTFSEL_btfIn1Reg_im <= minResRX2FFTBTFSEL_btfIn1Reg_im_next;
            minResRX2FFTBTFSEL_btfIn2Reg_re <= minResRX2FFTBTFSEL_btfIn2Reg_re_next;
            minResRX2FFTBTFSEL_btfIn2Reg_im <= minResRX2FFTBTFSEL_btfIn2Reg_im_next;
            minResRX2FFTBTFSEL_btfInReg_vld <= minResRX2FFTBTFSEL_btfInReg_vld_next;
            minResRX2FFTBTFSEL_cnt <= minResRX2FFTBTFSEL_cnt_next;
            minResRX2FFTBTFSEL_cntMax <= minResRX2FFTBTFSEL_cntMax_next;
            minResRX2FFTBTFSEL_muxSel <= minResRX2FFTBTFSEL_muxSel_next;
            minResRX2FFTBTFSEL_dinReg1_re <= minResRX2FFTBTFSEL_dinReg1_re_next;
            minResRX2FFTBTFSEL_dinReg1_im <= minResRX2FFTBTFSEL_dinReg1_im_next;
            minResRX2FFTBTFSEL_dinReg2_re <= minResRX2FFTBTFSEL_dinReg2_re_next;
            minResRX2FFTBTFSEL_dinReg2_im <= minResRX2FFTBTFSEL_dinReg2_im_next;
            minResRX2FFTBTFSEL_dinReg3_re <= minResRX2FFTBTFSEL_dinReg3_re_next;
            minResRX2FFTBTFSEL_dinReg3_im <= minResRX2FFTBTFSEL_dinReg3_im_next;
            minResRX2FFTBTFSEL_dMemOut1Reg_re <= minResRX2FFTBTFSEL_dMemOut1Reg_re_next;
            minResRX2FFTBTFSEL_dMemOut1Reg_im <= minResRX2FFTBTFSEL_dMemOut1Reg_im_next;
            minResRX2FFTBTFSEL_dMemOut2Reg_re <= minResRX2FFTBTFSEL_dMemOut2Reg_re_next;
            minResRX2FFTBTFSEL_dMemOut2Reg_im <= minResRX2FFTBTFSEL_dMemOut2Reg_im_next;
            minResRX2FFTBTFSEL_dMemOutReg_vld <= minResRX2FFTBTFSEL_dMemOutReg_vld_next;
          end
        end
      end
    end

  always @(dMemOut1_im, dMemOut1_re, dMemOut2_im, dMemOut2_re, dMemOut_vld, din_1_im,
       din_1_re, initIC, minResRX2FFTBTFSEL_btfIn1Reg_im,
       minResRX2FFTBTFSEL_btfIn1Reg_re, minResRX2FFTBTFSEL_btfIn2Reg_im,
       minResRX2FFTBTFSEL_btfIn2Reg_re, minResRX2FFTBTFSEL_btfInReg_vld,
       minResRX2FFTBTFSEL_cnt, minResRX2FFTBTFSEL_cntMax,
       minResRX2FFTBTFSEL_dMemOut1Reg_im, minResRX2FFTBTFSEL_dMemOut1Reg_re,
       minResRX2FFTBTFSEL_dMemOut2Reg_im, minResRX2FFTBTFSEL_dMemOut2Reg_re,
       minResRX2FFTBTFSEL_dMemOutReg_vld, minResRX2FFTBTFSEL_dinReg1_im,
       minResRX2FFTBTFSEL_dinReg1_re, minResRX2FFTBTFSEL_dinReg2_im,
       minResRX2FFTBTFSEL_dinReg2_re, minResRX2FFTBTFSEL_dinReg3_im,
       minResRX2FFTBTFSEL_dinReg3_re, minResRX2FFTBTFSEL_muxSel, stage) begin
    minResRX2FFTBTFSEL_cnt_next = minResRX2FFTBTFSEL_cnt;
    minResRX2FFTBTFSEL_cntMax_next = minResRX2FFTBTFSEL_cntMax;
    minResRX2FFTBTFSEL_muxSel_next = minResRX2FFTBTFSEL_muxSel;
    case ( stage)
      4'b0000 :
        begin
          minResRX2FFTBTFSEL_btfIn1Reg_re_next = minResRX2FFTBTFSEL_dMemOut1Reg_re;
          minResRX2FFTBTFSEL_btfIn1Reg_im_next = minResRX2FFTBTFSEL_dMemOut1Reg_im;
          minResRX2FFTBTFSEL_btfIn2Reg_re_next = minResRX2FFTBTFSEL_dinReg3_re;
          minResRX2FFTBTFSEL_btfIn2Reg_im_next = minResRX2FFTBTFSEL_dinReg3_im;
        end
      default :
        begin
          if (minResRX2FFTBTFSEL_muxSel) begin
            minResRX2FFTBTFSEL_btfIn1Reg_re_next = minResRX2FFTBTFSEL_dMemOut2Reg_re;
            minResRX2FFTBTFSEL_btfIn1Reg_im_next = minResRX2FFTBTFSEL_dMemOut2Reg_im;
            minResRX2FFTBTFSEL_btfIn2Reg_re_next = minResRX2FFTBTFSEL_dMemOut1Reg_re;
            minResRX2FFTBTFSEL_btfIn2Reg_im_next = minResRX2FFTBTFSEL_dMemOut1Reg_im;
          end
          else begin
            minResRX2FFTBTFSEL_btfIn1Reg_re_next = minResRX2FFTBTFSEL_dMemOut1Reg_re;
            minResRX2FFTBTFSEL_btfIn1Reg_im_next = minResRX2FFTBTFSEL_dMemOut1Reg_im;
            minResRX2FFTBTFSEL_btfIn2Reg_re_next = minResRX2FFTBTFSEL_dMemOut2Reg_re;
            minResRX2FFTBTFSEL_btfIn2Reg_im_next = minResRX2FFTBTFSEL_dMemOut2Reg_im;
          end
        end
    endcase
    minResRX2FFTBTFSEL_dinReg3_re_next = minResRX2FFTBTFSEL_dinReg2_re;
    minResRX2FFTBTFSEL_dinReg2_re_next = minResRX2FFTBTFSEL_dinReg1_re;
    minResRX2FFTBTFSEL_dinReg1_re_next = din_1_re;
    minResRX2FFTBTFSEL_dinReg3_im_next = minResRX2FFTBTFSEL_dinReg2_im;
    minResRX2FFTBTFSEL_dinReg2_im_next = minResRX2FFTBTFSEL_dinReg1_im;
    minResRX2FFTBTFSEL_dinReg1_im_next = din_1_im;
    if (initIC) begin
      minResRX2FFTBTFSEL_cnt_next = 11'b00000000000;
      minResRX2FFTBTFSEL_muxSel_next = 1'b0;
      case ( stage)
        4'b0000 :
          begin
            minResRX2FFTBTFSEL_cntMax_next = 11'b11111111111;
          end
        default :
          begin
            minResRX2FFTBTFSEL_cntMax_next = minResRX2FFTBTFSEL_cntMax >> 8'd1;
          end
      endcase
    end
    else if (minResRX2FFTBTFSEL_dMemOutReg_vld) begin
      if (minResRX2FFTBTFSEL_cnt == minResRX2FFTBTFSEL_cntMax) begin
        minResRX2FFTBTFSEL_cnt_next = 11'b00000000000;
        minResRX2FFTBTFSEL_muxSel_next =  ! minResRX2FFTBTFSEL_muxSel;
      end
      else begin
        minResRX2FFTBTFSEL_cnt_next = minResRX2FFTBTFSEL_cnt + 11'b00000000001;
      end
    end
    minResRX2FFTBTFSEL_btfInReg_vld_next = minResRX2FFTBTFSEL_dMemOutReg_vld;
    minResRX2FFTBTFSEL_dMemOutReg_vld_next = dMemOut_vld;
    minResRX2FFTBTFSEL_dMemOut1Reg_re_next = dMemOut1_re;
    minResRX2FFTBTFSEL_dMemOut1Reg_im_next = dMemOut1_im;
    minResRX2FFTBTFSEL_dMemOut2Reg_re_next = dMemOut2_re;
    minResRX2FFTBTFSEL_dMemOut2Reg_im_next = dMemOut2_im;
    btfIn1_re_1 = minResRX2FFTBTFSEL_btfIn1Reg_re;
    btfIn1_im_1 = minResRX2FFTBTFSEL_btfIn1Reg_im;
    btfIn2_re_1 = minResRX2FFTBTFSEL_btfIn2Reg_re;
    btfIn2_im_1 = minResRX2FFTBTFSEL_btfIn2Reg_im;
    btfIn_vld_1 = minResRX2FFTBTFSEL_btfInReg_vld;
  end



  assign btfIn1_re = btfIn1_re_1;

  assign btfIn1_im = btfIn1_im_1;

  assign btfIn2_re = btfIn2_re_1;

  assign btfIn2_im = btfIn2_im_1;

  assign btfIn_vld = btfIn_vld_1;

endmodule  // MINRESRX2FFT_BTFSEL

