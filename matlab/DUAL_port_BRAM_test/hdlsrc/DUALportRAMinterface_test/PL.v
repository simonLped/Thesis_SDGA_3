// -------------------------------------------------------------
// 
// File Name: DUAL_port_BRAM_test\hdlsrc\DUALportRAMinterface_test\PL.v
// Created: 2024-05-14 10:54:43
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 7.50008e-06
// Target subsystem base rate: 7.50008e-06
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        7.50008e-06
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// bram_din                      ce_out        7.50008e-06
// bram_addr                     ce_out        7.50008e-06
// bram_en                       ce_out        7.50008e-06
// PL_done                       ce_out        7.50008e-06
// bram_we                       ce_out        7.50008e-06
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: PL
// Source Path: DUALportRAMinterface_test/PL
// Hierarchy Level: 0
// Model version: 1.53
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module PL
          (clk,
           reset_x,
           clk_enable,
           START_GA,
           bram_dout,
           ce_out,
           bram_din,
           bram_addr,
           bram_en,
           PL_done,
           bram_we);


  input   clk;
  input   reset_x;
  input   clk_enable;
  input   START_GA;
  input   [31:0] bram_dout;  // uint32
  output  ce_out;
  output  [31:0] bram_din;  // uint32
  output  [15:0] bram_addr;  // uint16
  output  bram_en;
  output  PL_done;
  output  [3:0] bram_we;  // ufix4


  wire Constant_out1;
  wire counter_reset;
  wire counter_reset_1;
  wire [15:0] index_counter_out1;  // uint16
  wire counter_increment;
  wire PL_done_1;
  wire write_enable;
  wire counter_increment_1;
  wire [31:0] Constant11_out1;  // uint32
  wire [31:0] Constant10_out1;  // uint32
  wire [31:0] Constant1_out1;  // uint32
  wire [31:0] Constant2_out1;  // uint32
  wire [31:0] Constant6_out1;  // uint32
  wire [31:0] Constant7_out1;  // uint32
  wire [31:0] Constant8_out1;  // uint32
  wire [31:0] Multiport_Switch_out1;  // uint32
  wire write_enable_1;
  wire write_enable_2;
  wire [3:0] y;  // ufix4


  assign Constant_out1 = 1'b1;



  assign counter_reset_1 = counter_reset;

  Chart u_Chart (.clk(clk),
                 .reset_x(reset_x),
                 .enb(clk_enable),
                 .GA_done(Constant_out1),
                 .GPIO(START_GA),
                 .counter(index_counter_out1),  // uint16
                 .counter_increment(counter_increment),
                 .counter_reset(counter_reset),
                 .PL_done(PL_done_1),
                 .write_enable(write_enable)
                 );

  assign counter_increment_1 = counter_increment;

  index_counter u_index_counter (.clk(clk),
                                 .reset_x(reset_x),
                                 .enb(clk_enable),
                                 .In1(counter_increment_1),
                                 .In2(counter_reset_1),
                                 .index_counter_1(index_counter_out1)  // uint16
                                 );

  assign Constant11_out1 = 32'b00000000000000000000011111010000;



  assign Constant10_out1 = 32'b00000000000000000010111011100000;



  assign Constant1_out1 = 32'b00000000000000000010001100101000;



  assign Constant2_out1 = 32'b00000000000000000000111110100000;



  assign Constant6_out1 = 32'b00000000000000000001011101110000;



  assign Constant7_out1 = 32'b00000000000000000011001011001000;



  assign Constant8_out1 = 32'b00000000000000000001101101011000;



  assign Multiport_Switch_out1 = (index_counter_out1 == 16'b0000000000000000 ? Constant11_out1 :
              (index_counter_out1 == 16'b0000000000000001 ? Constant10_out1 :
              (index_counter_out1 == 16'b0000000000000010 ? Constant1_out1 :
              (index_counter_out1 == 16'b0000000000000011 ? Constant2_out1 :
              (index_counter_out1 == 16'b0000000000000100 ? Constant6_out1 :
              (index_counter_out1 == 16'b0000000000000101 ? Constant7_out1 :
              (index_counter_out1 == 16'b0000000000000110 ? Constant8_out1 :
              (index_counter_out1 == 16'b0000000000000111 ? Constant11_out1 :
              Constant11_out1))))))));



  assign bram_din = Multiport_Switch_out1;

  assign bram_addr = index_counter_out1;

  assign write_enable_1 = write_enable;

  assign bram_en = write_enable_1;

  assign PL_done = PL_done_1;

  assign write_enable_2 = write_enable;

  assign y = {write_enable_2, write_enable_2, write_enable_2, write_enable_2};



  assign bram_we = y;

  assign ce_out = clk_enable;

endmodule  // PL

