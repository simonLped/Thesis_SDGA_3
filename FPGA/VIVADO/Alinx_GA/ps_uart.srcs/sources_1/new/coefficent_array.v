// -------------------------------------------------------------
// 
// File Name: DUAL_port_RAM_and_GA4\hdlsrc\DUALportRAMinterface_v3\coefficent_array.v
// Created: 2024-05-15 10:45:59
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: coefficent_array
// Source Path: DUALportRAMinterface_v3/PL/integration_block1/GA_main/coefficent_array
// Hierarchy Level: 3
// Model version: 1.52
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module coefficent_array
          (clk,
           reset_x,
           enb,
           individual_in_0,
           individual_in_1,
           individual_in_2,
           individual_in_3,
           individual_in_4,
           individual_in_5,
           individual_in_6,
           chose_input,
           start_sorting,
           chose_output,
           individual_out_0,
           individual_out_1,
           individual_out_2,
           individual_out_3,
           individual_out_4,
           individual_out_5,
           individual_out_6,
           sort_done);


  input   clk;
  input   reset_x;
  input   enb;
  input   signed [32:0] individual_in_0;  // sfix33_En15
  input   signed [32:0] individual_in_1;  // sfix33_En15
  input   signed [32:0] individual_in_2;  // sfix33_En15
  input   signed [32:0] individual_in_3;  // sfix33_En15
  input   signed [32:0] individual_in_4;  // sfix33_En15
  input   signed [32:0] individual_in_5;  // sfix33_En15
  input   signed [32:0] individual_in_6;  // sfix33_En15
  input   [3:0] chose_input;  // ufix4
  input   start_sorting;
  input   [3:0] chose_output;  // ufix4
  output  signed [32:0] individual_out_0;  // sfix33_En15
  output  signed [32:0] individual_out_1;  // sfix33_En15
  output  signed [32:0] individual_out_2;  // sfix33_En15
  output  signed [32:0] individual_out_3;  // sfix33_En15
  output  signed [32:0] individual_out_4;  // sfix33_En15
  output  signed [32:0] individual_out_5;  // sfix33_En15
  output  signed [32:0] individual_out_6;  // sfix33_En15
  output  sort_done;


  wire [3:0] Constant9_out1;  // ufix4
  wire [3:0] Constant11_out1;  // ufix4
  wire signed [32:0] individual_in [0:6];  // sfix33_En15 [7]
  wire [3:0] Constant10_out1;  // ufix4
  wire [3:0] Constant12_out1;  // ufix4
  wire [3:0] Constant13_out1;  // ufix4
  wire [3:0] Constant14_out1;  // ufix4
  wire Relational_Operator14_out1;
  wire [3:0] Constant7_out1;  // ufix4
  wire Relational_Operator13_out1;
  wire [3:0] Constant6_out1;  // ufix4
  wire Relational_Operator12_out1;
  wire [3:0] Constant8_out1;  // ufix4
  wire [3:0] Constant5_out1;  // ufix4
  wire Relational_Operator11_out1;
  wire [3:0] Constant4_out1;  // ufix4
  wire Relational_Operator5_out1;
  wire Logical_Operator2_out1;
  wire [3:0] Relational_Operator4_1;  // ufix4
  wire Relational_Operator4_out1;
  reg signed [32:0] Switch2_out1 [0:6];  // sfix33_En15 [7]
  wire [3:0] swap_counter1_out1;  // ufix4
  wire signed [32:0] individual2_out1;  // sfix33_En15
  wire signed [32:0] individual3_out1;  // sfix33_En15
  wire signed [32:0] individual4_out1;  // sfix33_En15
  wire signed [32:0] Multiport_Switch1_out1;  // sfix33_En15
  wire Logical_Operator_out1;
  wire Logical_Operator3_out1;
  reg signed [32:0] Switch3_out1 [0:6];  // sfix33_En15 [7]
  wire signed [32:0] individual1_out1;  // sfix33_En15
  wire signed [32:0] individual1_out2;  // sfix33_En15
  wire signed [32:0] individual1_out3;  // sfix33_En15
  wire signed [32:0] individual1_out4;  // sfix33_En15
  wire signed [32:0] individual1_out5;  // sfix33_En15
  wire signed [32:0] individual1_out6;  // sfix33_En15
  wire signed [32:0] individual1_out7;  // sfix33_En15
  wire signed [32:0] Mux1_out1 [0:6];  // sfix33_En15 [7]
  wire Logical_Operator1_out1;
  wire Logical_Operator4_out1;
  reg signed [32:0] Switch5_out1 [0:6];  // sfix33_En15 [7]
  wire signed [32:0] individual2_out2;  // sfix33_En15
  wire signed [32:0] individual2_out3;  // sfix33_En15
  wire signed [32:0] individual2_out4;  // sfix33_En15
  wire signed [32:0] individual2_out5;  // sfix33_En15
  wire signed [32:0] individual2_out6;  // sfix33_En15
  wire signed [32:0] individual2_out7;  // sfix33_En15
  wire signed [32:0] Mux2_out1 [0:6];  // sfix33_En15 [7]
  wire Relational_Operator10_out1;
  wire Logical_Operator5_out1;
  reg signed [32:0] Switch7_out1 [0:6];  // sfix33_En15 [7]
  wire [3:0] commit_swap;  // ufix4
  wire [3:0] commit_swap_1;  // ufix4
  wire switch_compare_1;
  wire signed [32:0] Mux3_out1 [0:6];  // sfix33_En15 [7]
  wire signed [32:0] individual4_out2;  // sfix33_En15
  wire signed [32:0] individual4_out3;  // sfix33_En15
  wire signed [32:0] individual4_out4;  // sfix33_En15
  wire signed [32:0] individual4_out5;  // sfix33_En15
  wire signed [32:0] individual4_out6;  // sfix33_En15
  wire signed [32:0] individual4_out7;  // sfix33_En15
  wire signed [32:0] Mux4_out1 [0:6];  // sfix33_En15 [7]
  wire Relational_Operator7_out1;
  wire switch_compare_1_1;
  reg signed [32:0] Switch6_out1 [0:6];  // sfix33_En15 [7]
  wire [3:0] commit_swap_2;  // ufix4
  wire Relational_Operator9_out1;
  wire switch_compare_1_2;
  wire signed [32:0] individual3_out2;  // sfix33_En15
  wire signed [32:0] individual3_out3;  // sfix33_En15
  wire signed [32:0] individual3_out4;  // sfix33_En15
  wire signed [32:0] individual3_out5;  // sfix33_En15
  wire signed [32:0] individual3_out6;  // sfix33_En15
  wire signed [32:0] individual3_out7;  // sfix33_En15
  wire Relational_Operator6_out1;
  wire switch_compare_1_3;
  reg signed [32:0] Switch4_out1 [0:6];  // sfix33_En15 [7]
  wire [3:0] commit_swap_3;  // ufix4
  wire Relational_Operator8_out1;
  wire switch_compare_1_4;
  wire signed [32:0] Multiport_Switch_out1;  // sfix33_En15
  wire Relational_Operator_out1;
  wire reset_swaps;
  wire reset_swaps_1;
  wire swaps_increment;
  wire swaps_increment_1;
  wire [3:0] swap_counter_out1;  // ufix4
  wire index_reset;
  wire index_reset_1;
  wire index_increment;
  wire index_increment_1;
  wire [3:0] commit_swap_4;  // ufix4
  wire switch_compare_1_5;
  wire signed [32:0] output_selector_out1_0;  // sfix33_En15
  wire signed [32:0] output_selector_out1_1;  // sfix33_En15
  wire signed [32:0] output_selector_out1_2;  // sfix33_En15
  wire signed [32:0] output_selector_out1_3;  // sfix33_En15
  wire signed [32:0] output_selector_out1_4;  // sfix33_En15
  wire signed [32:0] output_selector_out1_5;  // sfix33_En15
  wire signed [32:0] output_selector_out1_6;  // sfix33_En15
  reg signed [31:0] Switch7_t_0_0;  // int32
  reg signed [31:0] Switch7_t_1;  // int32
  reg signed [31:0] Switch6_t_0_0;  // int32
  reg signed [31:0] Switch6_t_1;  // int32
  reg signed [31:0] Switch5_t_0_0;  // int32
  reg signed [31:0] Switch5_t_1;  // int32
  reg signed [31:0] Switch4_t_0_0;  // int32
  reg signed [31:0] Switch4_t_1;  // int32
  reg signed [31:0] Switch3_t_0_0;  // int32
  reg signed [31:0] Switch3_t_1;  // int32
  reg signed [31:0] Switch2_t_0_0;  // int32
  reg signed [31:0] Switch2_t_1;  // int32


  assign Constant9_out1 = 4'b0001;



  assign Constant11_out1 = 4'b0010;



  assign individual_in[0] = individual_in_0;
  assign individual_in[1] = individual_in_1;
  assign individual_in[2] = individual_in_2;
  assign individual_in[3] = individual_in_3;
  assign individual_in[4] = individual_in_4;
  assign individual_in[5] = individual_in_5;
  assign individual_in[6] = individual_in_6;

  assign Constant10_out1 = 4'b0010;



  assign Constant12_out1 = 4'b0011;



  assign Constant13_out1 = 4'b0011;



  assign Constant14_out1 = 4'b0100;



  assign Relational_Operator14_out1 = chose_input == Constant14_out1;



  assign Constant7_out1 = 4'b0011;



  assign Relational_Operator13_out1 = chose_input == Constant7_out1;



  assign Constant6_out1 = 4'b0010;



  assign Relational_Operator12_out1 = chose_input == Constant6_out1;



  assign Constant8_out1 = 4'b0001;



  assign Constant5_out1 = 4'b0001;



  assign Relational_Operator11_out1 = chose_input == Constant5_out1;



  assign Constant4_out1 = 4'b0001;



  assign Logical_Operator2_out1 = Relational_Operator5_out1 | Relational_Operator11_out1;



  assign Relational_Operator4_1 = {3'b0, Logical_Operator2_out1};
  assign Relational_Operator4_out1 = Relational_Operator4_1 == Constant4_out1;



  assign Multiport_Switch1_out1 = (swap_counter1_out1 == 4'b0001 ? individual2_out1 :
              (swap_counter1_out1 == 4'b0010 ? individual3_out1 :
              (swap_counter1_out1 == 4'b0011 ? individual4_out1 :
              individual2_out1)));



  assign Logical_Operator3_out1 = Logical_Operator_out1 | Relational_Operator12_out1;



  assign Mux1_out1[0] = individual1_out1;
  assign Mux1_out1[1] = individual1_out2;
  assign Mux1_out1[2] = individual1_out3;
  assign Mux1_out1[3] = individual1_out4;
  assign Mux1_out1[4] = individual1_out5;
  assign Mux1_out1[5] = individual1_out6;
  assign Mux1_out1[6] = individual1_out7;

  assign Logical_Operator4_out1 = Logical_Operator1_out1 | Relational_Operator13_out1;



  assign Mux2_out1[0] = individual2_out1;
  assign Mux2_out1[1] = individual2_out2;
  assign Mux2_out1[2] = individual2_out3;
  assign Mux2_out1[3] = individual2_out4;
  assign Mux2_out1[4] = individual2_out5;
  assign Mux2_out1[5] = individual2_out6;
  assign Mux2_out1[6] = individual2_out7;

  assign Logical_Operator5_out1 = Relational_Operator10_out1 | Relational_Operator14_out1;



  assign commit_swap_1 = commit_swap;

  assign Relational_Operator10_out1 = commit_swap_1 == Constant13_out1;



  assign switch_compare_1 = Relational_Operator10_out1 > 1'b0;



  always @* begin
    if (switch_compare_1 == 1'b0) begin
      for(Switch7_t_1 = 32'sd0; Switch7_t_1 <= 32'sd6; Switch7_t_1 = Switch7_t_1 + 32'sd1) begin
        Switch7_out1[Switch7_t_1] = individual_in[Switch7_t_1];
      end
    end
    else begin
      for(Switch7_t_0_0 = 32'sd0; Switch7_t_0_0 <= 32'sd6; Switch7_t_0_0 = Switch7_t_0_0 + 32'sd1) begin
        Switch7_out1[Switch7_t_0_0] = Mux3_out1[Switch7_t_0_0];
      end
    end
  end



  individual4 u_individual4 (.clk(clk),
                             .reset_x(reset_x),
                             .enb(enb),
                             .reg_in(Switch7_out1[0]),  // sfix33_En15
                             .reg_in1(Switch7_out1[1]),  // sfix33_En15
                             .reg_in2(Switch7_out1[2]),  // sfix33_En15
                             .reg_in3(Switch7_out1[3]),  // sfix33_En15
                             .reg_in4(Switch7_out1[4]),  // sfix33_En15
                             .reg_in5(Switch7_out1[5]),  // sfix33_En15
                             .reg_in6(Switch7_out1[6]),  // sfix33_En15
                             .enable(Logical_Operator5_out1),
                             .score(individual4_out1),  // sfix33_En15
                             .a2(individual4_out2),  // sfix33_En15
                             .a3(individual4_out3),  // sfix33_En15
                             .a4(individual4_out4),  // sfix33_En15
                             .b2(individual4_out5),  // sfix33_En15
                             .b3(individual4_out6),  // sfix33_En15
                             .b4(individual4_out7)  // sfix33_En15
                             );

  assign Mux4_out1[0] = individual4_out1;
  assign Mux4_out1[1] = individual4_out2;
  assign Mux4_out1[2] = individual4_out3;
  assign Mux4_out1[3] = individual4_out4;
  assign Mux4_out1[4] = individual4_out5;
  assign Mux4_out1[5] = individual4_out6;
  assign Mux4_out1[6] = individual4_out7;

  assign switch_compare_1_1 = Relational_Operator7_out1 > 1'b0;



  always @* begin
    if (switch_compare_1_1 == 1'b0) begin
      for(Switch6_t_1 = 32'sd0; Switch6_t_1 <= 32'sd6; Switch6_t_1 = Switch6_t_1 + 32'sd1) begin
        Switch6_out1[Switch6_t_1] = Mux4_out1[Switch6_t_1];
      end
    end
    else begin
      for(Switch6_t_0_0 = 32'sd0; Switch6_t_0_0 <= 32'sd6; Switch6_t_0_0 = Switch6_t_0_0 + 32'sd1) begin
        Switch6_out1[Switch6_t_0_0] = Mux2_out1[Switch6_t_0_0];
      end
    end
  end



  assign Relational_Operator9_out1 = commit_swap_2 == Constant12_out1;



  assign commit_swap_2 = commit_swap;

  assign Relational_Operator7_out1 = commit_swap_2 == Constant10_out1;



  assign Logical_Operator1_out1 = Relational_Operator7_out1 | Relational_Operator9_out1;



  assign switch_compare_1_2 = Logical_Operator1_out1 > 1'b0;



  always @* begin
    if (switch_compare_1_2 == 1'b0) begin
      for(Switch5_t_1 = 32'sd0; Switch5_t_1 <= 32'sd6; Switch5_t_1 = Switch5_t_1 + 32'sd1) begin
        Switch5_out1[Switch5_t_1] = individual_in[Switch5_t_1];
      end
    end
    else begin
      for(Switch5_t_0_0 = 32'sd0; Switch5_t_0_0 <= 32'sd6; Switch5_t_0_0 = Switch5_t_0_0 + 32'sd1) begin
        Switch5_out1[Switch5_t_0_0] = Switch6_out1[Switch5_t_0_0];
      end
    end
  end



  individual3 u_individual3 (.clk(clk),
                             .reset_x(reset_x),
                             .enb(enb),
                             .reg_in(Switch5_out1[0]),  // sfix33_En15
                             .reg_in1(Switch5_out1[1]),  // sfix33_En15
                             .reg_in2(Switch5_out1[2]),  // sfix33_En15
                             .reg_in3(Switch5_out1[3]),  // sfix33_En15
                             .reg_in4(Switch5_out1[4]),  // sfix33_En15
                             .reg_in5(Switch5_out1[5]),  // sfix33_En15
                             .reg_in6(Switch5_out1[6]),  // sfix33_En15
                             .enable(Logical_Operator4_out1),
                             .score(individual3_out1),  // sfix33_En15
                             .a2(individual3_out2),  // sfix33_En15
                             .a3(individual3_out3),  // sfix33_En15
                             .a4(individual3_out4),  // sfix33_En15
                             .b2(individual3_out5),  // sfix33_En15
                             .b3(individual3_out6),  // sfix33_En15
                             .b4(individual3_out7)  // sfix33_En15
                             );

  assign Mux3_out1[0] = individual3_out1;
  assign Mux3_out1[1] = individual3_out2;
  assign Mux3_out1[2] = individual3_out3;
  assign Mux3_out1[3] = individual3_out4;
  assign Mux3_out1[4] = individual3_out5;
  assign Mux3_out1[5] = individual3_out6;
  assign Mux3_out1[6] = individual3_out7;

  assign switch_compare_1_3 = Relational_Operator6_out1 > 1'b0;



  always @* begin
    if (switch_compare_1_3 == 1'b0) begin
      for(Switch4_t_1 = 32'sd0; Switch4_t_1 <= 32'sd6; Switch4_t_1 = Switch4_t_1 + 32'sd1) begin
        Switch4_out1[Switch4_t_1] = Mux3_out1[Switch4_t_1];
      end
    end
    else begin
      for(Switch4_t_0_0 = 32'sd0; Switch4_t_0_0 <= 32'sd6; Switch4_t_0_0 = Switch4_t_0_0 + 32'sd1) begin
        Switch4_out1[Switch4_t_0_0] = Mux1_out1[Switch4_t_0_0];
      end
    end
  end



  assign Relational_Operator8_out1 = commit_swap_3 == Constant11_out1;



  assign commit_swap_3 = commit_swap;

  assign Relational_Operator6_out1 = commit_swap_3 == Constant9_out1;



  assign Logical_Operator_out1 = Relational_Operator6_out1 | Relational_Operator8_out1;



  assign switch_compare_1_4 = Logical_Operator_out1 > 1'b0;



  always @* begin
    if (switch_compare_1_4 == 1'b0) begin
      for(Switch3_t_1 = 32'sd0; Switch3_t_1 <= 32'sd6; Switch3_t_1 = Switch3_t_1 + 32'sd1) begin
        Switch3_out1[Switch3_t_1] = individual_in[Switch3_t_1];
      end
    end
    else begin
      for(Switch3_t_0_0 = 32'sd0; Switch3_t_0_0 <= 32'sd6; Switch3_t_0_0 = Switch3_t_0_0 + 32'sd1) begin
        Switch3_out1[Switch3_t_0_0] = Switch4_out1[Switch3_t_0_0];
      end
    end
  end



  individual2 u_individual2 (.clk(clk),
                             .reset_x(reset_x),
                             .enb(enb),
                             .reg_in(Switch3_out1[0]),  // sfix33_En15
                             .reg_in1(Switch3_out1[1]),  // sfix33_En15
                             .reg_in2(Switch3_out1[2]),  // sfix33_En15
                             .reg_in3(Switch3_out1[3]),  // sfix33_En15
                             .reg_in4(Switch3_out1[4]),  // sfix33_En15
                             .reg_in5(Switch3_out1[5]),  // sfix33_En15
                             .reg_in6(Switch3_out1[6]),  // sfix33_En15
                             .enable(Logical_Operator3_out1),
                             .score(individual2_out1),  // sfix33_En15
                             .a2(individual2_out2),  // sfix33_En15
                             .a3(individual2_out3),  // sfix33_En15
                             .a4(individual2_out4),  // sfix33_En15
                             .b2(individual2_out5),  // sfix33_En15
                             .b3(individual2_out6),  // sfix33_En15
                             .b4(individual2_out7)  // sfix33_En15
                             );

  assign Multiport_Switch_out1 = (swap_counter1_out1 == 4'b0001 ? individual1_out1 :
              (swap_counter1_out1 == 4'b0010 ? individual2_out1 :
              (swap_counter1_out1 == 4'b0011 ? individual3_out1 :
              individual1_out1)));



  assign Relational_Operator_out1 = Multiport_Switch_out1 > Multiport_Switch1_out1;



  assign reset_swaps_1 = reset_swaps;

  assign swaps_increment_1 = swaps_increment;

  swap_counter u_swap_counter (.clk(clk),
                               .reset_x(reset_x),
                               .enb(enb),
                               .In1(swaps_increment_1),
                               .In2(reset_swaps_1),
                               .Out1(swap_counter_out1)  // ufix4
                               );

  assign index_reset_1 = index_reset;

  assign index_increment_1 = index_increment;

  swap_counter1 u_swap_counter1 (.clk(clk),
                                 .reset_x(reset_x),
                                 .enb(enb),
                                 .In1(index_increment_1),
                                 .In2(index_reset_1),
                                 .Out1(swap_counter1_out1)  // ufix4
                                 );

  Chart_block u_Chart (.clk(clk),
                       .reset_x(reset_x),
                       .enb(enb),
                       .index(swap_counter1_out1),  // ufix4
                       .start_sort(start_sorting),
                       .swaps_in(swap_counter_out1),  // ufix4
                       .swap_signal(Relational_Operator_out1),
                       .index_increment(index_increment),
                       .index_reset(index_reset),
                       .sort_done(sort_done),
                       .commit_swap(commit_swap),  // ufix4
                       .swaps_increment(swaps_increment),
                       .reset_swaps(reset_swaps)
                       );

  assign commit_swap_4 = commit_swap;

  assign Relational_Operator5_out1 = commit_swap_4 == Constant8_out1;



  assign switch_compare_1_5 = Relational_Operator5_out1 > 1'b0;



  always @* begin
    if (switch_compare_1_5 == 1'b0) begin
      for(Switch2_t_1 = 32'sd0; Switch2_t_1 <= 32'sd6; Switch2_t_1 = Switch2_t_1 + 32'sd1) begin
        Switch2_out1[Switch2_t_1] = individual_in[Switch2_t_1];
      end
    end
    else begin
      for(Switch2_t_0_0 = 32'sd0; Switch2_t_0_0 <= 32'sd6; Switch2_t_0_0 = Switch2_t_0_0 + 32'sd1) begin
        Switch2_out1[Switch2_t_0_0] = Mux2_out1[Switch2_t_0_0];
      end
    end
  end



  individual1 u_individual1 (.clk(clk),
                             .reset_x(reset_x),
                             .enb(enb),
                             .reg_in(Switch2_out1[0]),  // sfix33_En15
                             .reg_in1(Switch2_out1[1]),  // sfix33_En15
                             .reg_in2(Switch2_out1[2]),  // sfix33_En15
                             .reg_in3(Switch2_out1[3]),  // sfix33_En15
                             .reg_in4(Switch2_out1[4]),  // sfix33_En15
                             .reg_in5(Switch2_out1[5]),  // sfix33_En15
                             .reg_in6(Switch2_out1[6]),  // sfix33_En15
                             .enable(Relational_Operator4_out1),
                             .score(individual1_out1),  // sfix33_En15
                             .a2(individual1_out2),  // sfix33_En15
                             .a3(individual1_out3),  // sfix33_En15
                             .a4(individual1_out4),  // sfix33_En15
                             .b2(individual1_out5),  // sfix33_En15
                             .b3(individual1_out6),  // sfix33_En15
                             .b4(individual1_out7)  // sfix33_En15
                             );

  output_selector u_output_selector (.chose_port(chose_output),  // ufix4
                                     .In2_0(individual1_out1),  // sfix33_En15
                                     .In2_1(individual1_out2),  // sfix33_En15
                                     .In2_2(individual1_out3),  // sfix33_En15
                                     .In2_3(individual1_out4),  // sfix33_En15
                                     .In2_4(individual1_out5),  // sfix33_En15
                                     .In2_5(individual1_out6),  // sfix33_En15
                                     .In2_6(individual1_out7),  // sfix33_En15
                                     .In3_0(individual2_out1),  // sfix33_En15
                                     .In3_1(individual2_out2),  // sfix33_En15
                                     .In3_2(individual2_out3),  // sfix33_En15
                                     .In3_3(individual2_out4),  // sfix33_En15
                                     .In3_4(individual2_out5),  // sfix33_En15
                                     .In3_5(individual2_out6),  // sfix33_En15
                                     .In3_6(individual2_out7),  // sfix33_En15
                                     .In4_0(individual3_out1),  // sfix33_En15
                                     .In4_1(individual3_out2),  // sfix33_En15
                                     .In4_2(individual3_out3),  // sfix33_En15
                                     .In4_3(individual3_out4),  // sfix33_En15
                                     .In4_4(individual3_out5),  // sfix33_En15
                                     .In4_5(individual3_out6),  // sfix33_En15
                                     .In4_6(individual3_out7),  // sfix33_En15
                                     .In5_0(individual4_out1),  // sfix33_En15
                                     .In5_1(individual4_out2),  // sfix33_En15
                                     .In5_2(individual4_out3),  // sfix33_En15
                                     .In5_3(individual4_out4),  // sfix33_En15
                                     .In5_4(individual4_out5),  // sfix33_En15
                                     .In5_5(individual4_out6),  // sfix33_En15
                                     .In5_6(individual4_out7),  // sfix33_En15
                                     .Out1_0(output_selector_out1_0),  // sfix33_En15
                                     .Out1_1(output_selector_out1_1),  // sfix33_En15
                                     .Out1_2(output_selector_out1_2),  // sfix33_En15
                                     .Out1_3(output_selector_out1_3),  // sfix33_En15
                                     .Out1_4(output_selector_out1_4),  // sfix33_En15
                                     .Out1_5(output_selector_out1_5),  // sfix33_En15
                                     .Out1_6(output_selector_out1_6)  // sfix33_En15
                                     );

  assign individual_out_0 = output_selector_out1_0;

  assign individual_out_1 = output_selector_out1_1;

  assign individual_out_2 = output_selector_out1_2;

  assign individual_out_3 = output_selector_out1_3;

  assign individual_out_4 = output_selector_out1_4;

  assign individual_out_5 = output_selector_out1_5;

  assign individual_out_6 = output_selector_out1_6;

endmodule  // coefficent_array

