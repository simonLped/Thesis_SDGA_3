// -------------------------------------------------------------
// 
// File Name: DUAL_port_RAM_and_GA4\hdlsrc\DUALportRAMinterface_v3\Complex4Multiply.v
// Created: 2024-05-15 10:45:59
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Complex4Multiply
// Source Path: DUALportRAMinterface_v3/PL/integration_block1/FFT/MINRESRX2_BUTTERFLY/Complex4Multiply
// Hierarchy Level: 4
// Model version: 1.52
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Complex4Multiply
          (clk,
           reset_x,
           enb,
           btfIn2_re,
           btfIn2_im,
           din2Dly_vld,
           twdl_re,
           twdl_im,
           syncReset,
           dinXTwdl_re,
           dinXTwdl_im,
           dinXTwdl_vld);


  input   clk;
  input   reset_x;
  input   enb;
  input   signed [27:0] btfIn2_re;  // sfix28_En14
  input   signed [27:0] btfIn2_im;  // sfix28_En14
  input   din2Dly_vld;
  input   signed [27:0] twdl_re;  // sfix28_En26
  input   signed [27:0] twdl_im;  // sfix28_En26
  input   syncReset;
  output  signed [56:0] dinXTwdl_re;  // sfix57_En40
  output  signed [56:0] dinXTwdl_im;  // sfix57_En40
  output  dinXTwdl_vld;


  reg signed [27:0] din_re_reg;  // sfix28_En14
  reg signed [27:0] din_im_reg;  // sfix28_En14
  reg signed [27:0] twdl_re_reg;  // sfix28_En26
  reg signed [27:0] twdl_im_reg;  // sfix28_En26
  reg signed [27:0] Complex4Multiply_din1_re_pipe1;  // sfix28
  reg signed [27:0] Complex4Multiply_din1_im_pipe1;  // sfix28
  reg signed [55:0] Complex4Multiply_mult1_re_pipe1;  // sfix56
  reg signed [55:0] Complex4Multiply_mult2_re_pipe1;  // sfix56
  reg signed [55:0] Complex4Multiply_mult1_im_pipe1;  // sfix56
  reg signed [55:0] Complex4Multiply_mult2_im_pipe1;  // sfix56
  reg signed [27:0] Complex4Multiply_twiddle_re_pipe1;  // sfix28
  reg signed [27:0] Complex4Multiply_twiddle_im_pipe1;  // sfix28
  reg signed [55:0] prod1_re;  // sfix56_En40
  reg signed [55:0] prod1_im;  // sfix56_En40
  reg signed [55:0] prod2_re;  // sfix56_En40
  reg signed [55:0] prod2_im;  // sfix56_En40
  reg  din_vld_dly1;
  reg  din_vld_dly2;
  reg  din_vld_dly3;
  reg  prod_vld;
  reg signed [56:0] Complex4Add_multRes_re_reg;  // sfix57
  reg signed [56:0] Complex4Add_multRes_im_reg;  // sfix57
  reg  Complex4Add_prod_vld_reg1;
  reg signed [55:0] Complex4Add_prod1_re_reg;  // sfix56
  reg signed [55:0] Complex4Add_prod1_im_reg;  // sfix56
  reg signed [55:0] Complex4Add_prod2_re_reg;  // sfix56
  reg signed [55:0] Complex4Add_prod2_im_reg;  // sfix56
  wire signed [56:0] Complex4Add_multRes_re_reg_next;  // sfix57_En40
  wire signed [56:0] Complex4Add_multRes_im_reg_next;  // sfix57_En40
  wire signed [56:0] Complex4Add_sub_cast;  // sfix57_En40
  wire signed [56:0] Complex4Add_sub_cast_1;  // sfix57_En40
  wire signed [56:0] Complex4Add_add_cast;  // sfix57_En40
  wire signed [56:0] Complex4Add_add_cast_1;  // sfix57_En40
  wire signed [56:0] mulResFP_re;  // sfix57_En40
  wire signed [56:0] mulResFP_im;  // sfix57_En40
  reg  dinXTwdl_vld_1;

  initial begin
    Complex4Multiply_din1_re_pipe1 = 28'sb0000000000000000000000000000;
    Complex4Multiply_din1_im_pipe1 = 28'sb0000000000000000000000000000;
    Complex4Multiply_twiddle_re_pipe1 = 28'sb0000000000000000000000000000;
    Complex4Multiply_twiddle_im_pipe1 = 28'sb0000000000000000000000000000;
    Complex4Multiply_mult1_re_pipe1 = 56'sh00000000000000;
    Complex4Multiply_mult2_re_pipe1 = 56'sh00000000000000;
    Complex4Multiply_mult1_im_pipe1 = 56'sh00000000000000;
    Complex4Multiply_mult2_im_pipe1 = 56'sh00000000000000;
    prod1_re = 56'sh00000000000000;
    prod2_re = 56'sh00000000000000;
    prod1_im = 56'sh00000000000000;
    prod2_im = 56'sh00000000000000;
  end

  always @(posedge clk)
    begin : intdelay_process
      if (reset_x == 1'b0) begin
        din_re_reg <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            din_re_reg <= 28'sb0000000000000000000000000000;
          end
          else begin
            din_re_reg <= btfIn2_re;
          end
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_1_process
      if (reset_x == 1'b0) begin
        din_im_reg <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            din_im_reg <= 28'sb0000000000000000000000000000;
          end
          else begin
            din_im_reg <= btfIn2_im;
          end
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_2_process
      if (reset_x == 1'b0) begin
        twdl_re_reg <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            twdl_re_reg <= 28'sb0000000000000000000000000000;
          end
          else begin
            twdl_re_reg <= twdl_re;
          end
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_3_process
      if (reset_x == 1'b0) begin
        twdl_im_reg <= 28'sb0000000000000000000000000000;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            twdl_im_reg <= 28'sb0000000000000000000000000000;
          end
          else begin
            twdl_im_reg <= twdl_im;
          end
        end
      end
    end



  // Complex4Multiply
  always @(posedge clk)
    begin : Complex4Multiply_1_process
      if (enb) begin
        prod1_re <= Complex4Multiply_mult1_re_pipe1;
        prod2_re <= Complex4Multiply_mult2_re_pipe1;
        prod1_im <= Complex4Multiply_mult1_im_pipe1;
        prod2_im <= Complex4Multiply_mult2_im_pipe1;
        Complex4Multiply_mult1_re_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_mult2_re_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult1_im_pipe1 <= Complex4Multiply_din1_re_pipe1 * Complex4Multiply_twiddle_im_pipe1;
        Complex4Multiply_mult2_im_pipe1 <= Complex4Multiply_din1_im_pipe1 * Complex4Multiply_twiddle_re_pipe1;
        Complex4Multiply_twiddle_re_pipe1 <= twdl_re_reg;
        Complex4Multiply_twiddle_im_pipe1 <= twdl_im_reg;
        Complex4Multiply_din1_re_pipe1 <= din_re_reg;
        Complex4Multiply_din1_im_pipe1 <= din_im_reg;
      end
    end



  always @(posedge clk)
    begin : intdelay_4_process
      if (reset_x == 1'b0) begin
        din_vld_dly1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            din_vld_dly1 <= 1'b0;
          end
          else begin
            din_vld_dly1 <= din2Dly_vld;
          end
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_5_process
      if (reset_x == 1'b0) begin
        din_vld_dly2 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            din_vld_dly2 <= 1'b0;
          end
          else begin
            din_vld_dly2 <= din_vld_dly1;
          end
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_6_process
      if (reset_x == 1'b0) begin
        din_vld_dly3 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            din_vld_dly3 <= 1'b0;
          end
          else begin
            din_vld_dly3 <= din_vld_dly2;
          end
        end
      end
    end



  always @(posedge clk)
    begin : intdelay_7_process
      if (reset_x == 1'b0) begin
        prod_vld <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            prod_vld <= 1'b0;
          end
          else begin
            prod_vld <= din_vld_dly3;
          end
        end
      end
    end



  // Complex4Add
  always @(posedge clk)
    begin : Complex4Add_process
      if (reset_x == 1'b0) begin
        Complex4Add_multRes_re_reg <= 57'sh000000000000000;
        Complex4Add_multRes_im_reg <= 57'sh000000000000000;
        Complex4Add_prod1_re_reg <= 56'sh00000000000000;
        Complex4Add_prod1_im_reg <= 56'sh00000000000000;
        Complex4Add_prod2_re_reg <= 56'sh00000000000000;
        Complex4Add_prod2_im_reg <= 56'sh00000000000000;
        Complex4Add_prod_vld_reg1 <= 1'b0;
        dinXTwdl_vld_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          if (syncReset == 1'b1) begin
            Complex4Add_multRes_re_reg <= 57'sh000000000000000;
            Complex4Add_multRes_im_reg <= 57'sh000000000000000;
            Complex4Add_prod1_re_reg <= 56'sh00000000000000;
            Complex4Add_prod1_im_reg <= 56'sh00000000000000;
            Complex4Add_prod2_re_reg <= 56'sh00000000000000;
            Complex4Add_prod2_im_reg <= 56'sh00000000000000;
            Complex4Add_prod_vld_reg1 <= 1'b0;
            dinXTwdl_vld_1 <= 1'b0;
          end
          else begin
            Complex4Add_multRes_re_reg <= Complex4Add_multRes_re_reg_next;
            Complex4Add_multRes_im_reg <= Complex4Add_multRes_im_reg_next;
            Complex4Add_prod1_re_reg <= prod1_re;
            Complex4Add_prod1_im_reg <= prod1_im;
            Complex4Add_prod2_re_reg <= prod2_re;
            Complex4Add_prod2_im_reg <= prod2_im;
            dinXTwdl_vld_1 <= Complex4Add_prod_vld_reg1;
            Complex4Add_prod_vld_reg1 <= prod_vld;
          end
        end
      end
    end

  assign Complex4Add_sub_cast = {Complex4Add_prod1_re_reg[55], Complex4Add_prod1_re_reg};
  assign Complex4Add_sub_cast_1 = {Complex4Add_prod2_re_reg[55], Complex4Add_prod2_re_reg};
  assign Complex4Add_multRes_re_reg_next = Complex4Add_sub_cast - Complex4Add_sub_cast_1;
  assign Complex4Add_add_cast = {Complex4Add_prod1_im_reg[55], Complex4Add_prod1_im_reg};
  assign Complex4Add_add_cast_1 = {Complex4Add_prod2_im_reg[55], Complex4Add_prod2_im_reg};
  assign Complex4Add_multRes_im_reg_next = Complex4Add_add_cast + Complex4Add_add_cast_1;
  assign mulResFP_re = Complex4Add_multRes_re_reg;
  assign mulResFP_im = Complex4Add_multRes_im_reg;



  assign dinXTwdl_re = mulResFP_re;

  assign dinXTwdl_im = mulResFP_im;

  assign dinXTwdl_vld = dinXTwdl_vld_1;

endmodule  // Complex4Multiply

