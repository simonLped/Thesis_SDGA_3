// -------------------------------------------------------------
// 
// File Name: DUAL_port_RAM_and_GA4\hdlsrc\DUALportRAMinterface_v3\Subsystem.v
// Created: 2024-05-15 10:45:59
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem
// Source Path: DUALportRAMinterface_v3/PL/integration_block1/Subsystem
// Hierarchy Level: 2
// Model version: 1.52
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem
          (clk,
           reset_x,
           enb,
           enable,
           random_gene_out,
           random_method_out,
           b2_random_out,
           b3_random_out,
           b4_random_out,
           a2_random_out,
           a3_random_out,
           a4_random_out,
           random_sample_out);


  input   clk;
  input   reset_x;
  input   enb;
  input   enable;
  output  [2:0] random_gene_out;  // ufix3
  output  [2:0] random_method_out;  // ufix3
  output  signed [17:0] b2_random_out;  // sfix18_En15
  output  signed [17:0] b3_random_out;  // sfix18_En15
  output  signed [17:0] b4_random_out;  // sfix18_En15
  output  signed [17:0] a2_random_out;  // sfix18_En15
  output  signed [17:0] a3_random_out;  // sfix18_En15
  output  signed [17:0] a4_random_out;  // sfix18_En15
  output  [3:0] random_sample_out;  // ufix4


  wire alpha16bLFSR1_out1;
  wire alpha16bLFSR1_out2;
  wire alpha16bLFSR1_out3;
  wire alpha16bLFSR1_out4;
  wire alpha16bLFSR1_out5;
  wire alpha16bLFSR1_out6;
  wire alpha16bLFSR1_out7;
  wire alpha16bLFSR1_out8;
  wire alpha16bLFSR1_out9;
  wire alpha16bLFSR1_out10;
  wire alpha16bLFSR1_out11;
  wire alpha16bLFSR1_out12;
  wire alpha16bLFSR1_out13;
  wire alpha16bLFSR1_out14;
  wire alpha16bLFSR1_out15deadOutdeadOut;
  wire alpha16bLFSR1_out16deadOutdeadOut;
  wire [2:0] random_gene_out1;  // ufix3
  wire [2:0] random_method_out1;  // ufix3
  wire alpha16bLFSR_out1;
  wire alpha16bLFSR_out2;
  wire alpha16bLFSR_out3;
  wire alpha16bLFSR_out4;
  wire alpha16bLFSR_out5;
  wire alpha16bLFSR_out6;
  wire alpha16bLFSR_out7;
  wire alpha16bLFSR_out8;
  wire alpha16bLFSR_out9;
  wire alpha16bLFSR_out10;
  wire alpha16bLFSR_out11;
  wire alpha16bLFSR_out12;
  wire alpha16bLFSR_out13;
  wire alpha16bLFSR_out14;
  wire alpha16bLFSR_out15;
  wire alpha16bLFSR_out16;
  wire [15:0] y;  // uint16
  wire signed [17:0] b2_random_out1;  // sfix18_En15
  wire signed [17:0] b3_random_out1;  // sfix18_En15
  wire signed [17:0] b4_random_out1;  // sfix18_En15
  wire signed [17:0] a2_random_out1;  // sfix18_En15
  wire signed [17:0] a3_random_out1;  // sfix18_En15
  wire signed [17:0] a4_random_out1;  // sfix18_En15
  wire [3:0] random_sample_out1;  // ufix4


  alpha16bLFSR1 u_16bLFSR1 (.clk(clk),
                            .reset_x(reset_x),
                            .enb(enb),
                            .In1(enable),
                            .y_port(alpha16bLFSR1_out1),
                            .y1(alpha16bLFSR1_out2),
                            .y2(alpha16bLFSR1_out3),
                            .y3(alpha16bLFSR1_out4),
                            .y4(alpha16bLFSR1_out5),
                            .y5(alpha16bLFSR1_out6),
                            .y6(alpha16bLFSR1_out7),
                            .y7(alpha16bLFSR1_out8),
                            .y8(alpha16bLFSR1_out9),
                            .y9(alpha16bLFSR1_out10),
                            .y10(alpha16bLFSR1_out11),
                            .y11(alpha16bLFSR1_out12),
                            .y12(alpha16bLFSR1_out13),
                            .y13(alpha16bLFSR1_out14),
                            .y14(alpha16bLFSR1_out15deadOutdeadOut),
                            .y15(alpha16bLFSR1_out16deadOutdeadOut)
                            );

  random_gene u_random_gene (.u1(alpha16bLFSR1_out10),
                             .u2(alpha16bLFSR1_out11),
                             .In3(alpha16bLFSR1_out12),
                             .In4(alpha16bLFSR1_out14),
                             .Out1(random_gene_out1)  // ufix3
                             );

  assign random_gene_out = random_gene_out1;

  random_method u_random_method (.u1(alpha16bLFSR1_out8),
                                 .u2(alpha16bLFSR1_out9),
                                 .Out1(random_method_out1)  // ufix3
                                 );

  assign random_method_out = random_method_out1;

  alpha16bLFSR u_16bLFSR (.clk(clk),
                          .reset_x(reset_x),
                          .enb(enb),
                          .In1(enable),
                          .y_port(alpha16bLFSR_out1),
                          .y1(alpha16bLFSR_out2),
                          .y2(alpha16bLFSR_out3),
                          .y3(alpha16bLFSR_out4),
                          .y4(alpha16bLFSR_out5),
                          .y5(alpha16bLFSR_out6),
                          .y6(alpha16bLFSR_out7),
                          .y7(alpha16bLFSR_out8),
                          .y8(alpha16bLFSR_out9),
                          .y9(alpha16bLFSR_out10),
                          .y10(alpha16bLFSR_out11),
                          .y11(alpha16bLFSR_out12),
                          .y12(alpha16bLFSR_out13),
                          .y13(alpha16bLFSR_out14),
                          .y14(alpha16bLFSR_out15),
                          .y15(alpha16bLFSR_out16)
                          );

  assign y = {alpha16bLFSR_out1, alpha16bLFSR_out2, alpha16bLFSR_out3, alpha16bLFSR_out4, alpha16bLFSR_out5, alpha16bLFSR_out6, alpha16bLFSR_out7, alpha16bLFSR_out8, alpha16bLFSR_out9, alpha16bLFSR_out10, alpha16bLFSR_out11, alpha16bLFSR_out12, alpha16bLFSR_out13, alpha16bLFSR_out14, alpha16bLFSR_out15, alpha16bLFSR_out16};



  b2_random u_b2_random (.clk(clk),
                         .reset_x(reset_x),
                         .enb(enb),
                         .In1(y),  // uint16
                         .In2(alpha16bLFSR1_out4),
                         .Out1(b2_random_out1)  // sfix18_En15
                         );

  assign b2_random_out = b2_random_out1;

  b3_random u_b3_random (.clk(clk),
                         .reset_x(reset_x),
                         .enb(enb),
                         .In1(y),  // uint16
                         .In2(alpha16bLFSR1_out13),
                         .Out1(b3_random_out1)  // sfix18_En15
                         );

  assign b3_random_out = b3_random_out1;

  b4_random u_b4_random (.clk(clk),
                         .reset_x(reset_x),
                         .enb(enb),
                         .In1(y),  // uint16
                         .In2(alpha16bLFSR1_out5),
                         .Out1(b4_random_out1)  // sfix18_En15
                         );

  assign b4_random_out = b4_random_out1;

  a2_random u_a2_random (.clk(clk),
                         .reset_x(reset_x),
                         .enb(enb),
                         .In1(y),  // uint16
                         .In2(alpha16bLFSR1_out1),
                         .Out1(a2_random_out1)  // sfix18_En15
                         );

  assign a2_random_out = a2_random_out1;

  a3_random u_a3_random (.clk(clk),
                         .reset_x(reset_x),
                         .enb(enb),
                         .In1(y),  // uint16
                         .In2(alpha16bLFSR1_out2),
                         .Out1(a3_random_out1)  // sfix18_En15
                         );

  assign a3_random_out = a3_random_out1;

  a4_random u_a4_random (.clk(clk),
                         .reset_x(reset_x),
                         .enb(enb),
                         .In1(y),  // uint16
                         .In2(alpha16bLFSR1_out3),
                         .Out1(a4_random_out1)  // sfix18_En15
                         );

  assign a4_random_out = a4_random_out1;

  random_sample u_random_sample (.u1(alpha16bLFSR1_out6),
                                 .u2(alpha16bLFSR1_out7),
                                 .Out1(random_sample_out1)  // ufix4
                                 );

  assign random_sample_out = random_sample_out1;

endmodule  // Subsystem

