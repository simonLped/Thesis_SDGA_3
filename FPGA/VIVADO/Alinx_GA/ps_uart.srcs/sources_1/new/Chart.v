// -------------------------------------------------------------
// 
// File Name: DUAL_port_RAM_and_GA4\hdlsrc\DUALportRAMinterface_v3\Chart.v
// Created: 2024-05-15 10:45:59
// 
// Generated by MATLAB 24.1, HDL Coder 24.1, and Simulink 24.1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Chart
// Source Path: DUALportRAMinterface_v3/PL/integration_block1/GA_main/Chart
// Hierarchy Level: 3
// Model version: 1.52
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Chart
          (clk,
           reset_x,
           enb,
           sort_done,
           start_GA,
           score_done,
           FIFO_full,
           random_gene,
           selected_method,
           sample_index,
           generation_counter,
           GA_done,
           index_reset,
           index_increment,
           a2_method,
           a3_method,
           a4_method,
           b4_method,
           b2_method,
           b3_method,
           slave_input,
           slave_output,
           master_input,
           generation_increment,
           generation_reset,
           master_output,
           master_sort,
           FIFO_out_en,
           load_fifo);

  // Default encoded enumeration values for type state_type_is_Chart
  parameter state_type_is_Chart_IN_Crossover1 = 5'd0, state_type_is_Chart_IN_Crossover2 = 5'd1, state_type_is_Chart_IN_Crossover3 = 5'd2, state_type_is_Chart_IN_Crossover4 = 5'd3, state_type_is_Chart_IN_Crossover5 = 5'd4, state_type_is_Chart_IN_Crossover_load_dad = 5'd5, state_type_is_Chart_IN_Eliteism_or_Replication = 5'd6, state_type_is_Chart_IN_Enable_load_fifo = 5'd7, state_type_is_Chart_IN_GA_done_state = 5'd8, state_type_is_Chart_IN_Mutation1 = 5'd9, state_type_is_Chart_IN_Mutation2 = 5'd10, state_type_is_Chart_IN_Mutation3 = 5'd11, state_type_is_Chart_IN_Mutation4 = 5'd12, state_type_is_Chart_IN_Mutation5 = 5'd13, state_type_is_Chart_IN_Mutation6 = 5'd14, state_type_is_Chart_IN_New_individual = 5'd15, state_type_is_Chart_IN_generation_update = 5'd16, state_type_is_Chart_IN_index_and_hold = 5'd17, state_type_is_Chart_IN_index_update = 5'd18, state_type_is_Chart_IN_initial_random_population = 5'd19, state_type_is_Chart_IN_initial_state = 5'd20, state_type_is_Chart_IN_score_population = 5'd21, state_type_is_Chart_IN_sort_population = 5'd22, state_type_is_Chart_IN_start_index_and_hold = 5'd23, state_type_is_Chart_IN_wait_for_FIFO = 5'd24;

  input   clk;
  input   reset_x;
  input   enb;
  input   sort_done;
  input   start_GA;
  input   score_done;
  input   FIFO_full;
  input   [2:0] random_gene;  // ufix3
  input   [2:0] selected_method;  // ufix3
  input   [3:0] sample_index;  // ufix4
  input   [15:0] generation_counter;  // uint16
  output  GA_done;
  output  index_reset;
  output  index_increment;
  output  [1:0] a2_method;  // ufix2
  output  [1:0] a3_method;  // ufix2
  output  [1:0] a4_method;  // ufix2
  output  [1:0] b4_method;  // ufix2
  output  [1:0] b2_method;  // ufix2
  output  [1:0] b3_method;  // ufix2
  output  slave_input;
  output  slave_output;
  output  master_input;
  output  generation_increment;
  output  generation_reset;
  output  [1:0] master_output;  // ufix2
  output  master_sort;
  output  FIFO_out_en;
  output  load_fifo;


  reg [4:0] is_Chart;  // uint8
  reg  GA_done_reg;
  reg  index_reset_reg;
  reg  index_increment_reg;
  reg [1:0] a2_method_reg;  // ufix2
  reg [1:0] a3_method_reg;  // ufix2
  reg [1:0] a4_method_reg;  // ufix2
  reg [1:0] b4_method_reg;  // ufix2
  reg [1:0] b2_method_reg;  // ufix2
  reg [1:0] b3_method_reg;  // ufix2
  reg  slave_input_reg;
  reg  slave_output_reg;
  reg  master_input_reg;
  reg  generation_increment_reg;
  reg  generation_reset_reg;
  reg [1:0] master_output_reg;  // ufix2
  reg  master_sort_reg;
  reg  FIFO_out_en_reg;
  reg  load_fifo_reg;
  reg [4:0] is_Chart_next;  // enum type state_type_is_Chart (25 enums)
  reg  GA_done_reg_next;
  reg  index_reset_reg_next;
  reg  index_increment_reg_next;
  reg [1:0] a2_method_reg_next;  // ufix2
  reg [1:0] a3_method_reg_next;  // ufix2
  reg [1:0] a4_method_reg_next;  // ufix2
  reg [1:0] b4_method_reg_next;  // ufix2
  reg [1:0] b2_method_reg_next;  // ufix2
  reg [1:0] b3_method_reg_next;  // ufix2
  reg  slave_input_reg_next;
  reg  slave_output_reg_next;
  reg  master_input_reg_next;
  reg  generation_increment_reg_next;
  reg  generation_reset_reg_next;
  reg [1:0] master_output_reg_next;  // ufix2
  reg  master_sort_reg_next;
  reg  FIFO_out_en_reg_next;
  reg  load_fifo_reg_next;
  reg  guard1;


  always @(posedge clk)
    begin : Chart_1_process
      if (reset_x == 1'b0) begin
        GA_done_reg <= 1'b0;
        index_reset_reg <= 1'b0;
        index_increment_reg <= 1'b0;
        a2_method_reg <= 2'b00;
        a3_method_reg <= 2'b00;
        a4_method_reg <= 2'b00;
        b4_method_reg <= 2'b00;
        b2_method_reg <= 2'b00;
        b3_method_reg <= 2'b00;
        slave_input_reg <= 1'b0;
        slave_output_reg <= 1'b0;
        master_input_reg <= 1'b0;
        generation_increment_reg <= 1'b0;
        generation_reset_reg <= 1'b0;
        master_output_reg <= 2'b00;
        master_sort_reg <= 1'b0;
        FIFO_out_en_reg <= 1'b0;
        load_fifo_reg <= 1'b0;
        is_Chart <= state_type_is_Chart_IN_initial_state;
      end
      else begin
        if (enb) begin
          is_Chart <= is_Chart_next;
          GA_done_reg <= GA_done_reg_next;
          index_reset_reg <= index_reset_reg_next;
          index_increment_reg <= index_increment_reg_next;
          a2_method_reg <= a2_method_reg_next;
          a3_method_reg <= a3_method_reg_next;
          a4_method_reg <= a4_method_reg_next;
          b4_method_reg <= b4_method_reg_next;
          b2_method_reg <= b2_method_reg_next;
          b3_method_reg <= b3_method_reg_next;
          slave_input_reg <= slave_input_reg_next;
          slave_output_reg <= slave_output_reg_next;
          master_input_reg <= master_input_reg_next;
          generation_increment_reg <= generation_increment_reg_next;
          generation_reset_reg <= generation_reset_reg_next;
          master_output_reg <= master_output_reg_next;
          master_sort_reg <= master_sort_reg_next;
          FIFO_out_en_reg <= FIFO_out_en_reg_next;
          load_fifo_reg <= load_fifo_reg_next;
        end
      end
    end

  always @(FIFO_full, FIFO_out_en_reg, GA_done_reg, a2_method_reg, a3_method_reg,
       a4_method_reg, b2_method_reg, b3_method_reg, b4_method_reg,
       generation_counter, generation_increment_reg, generation_reset_reg,
       index_increment_reg, index_reset_reg, is_Chart, load_fifo_reg,
       master_input_reg, master_output_reg, master_sort_reg, random_gene,
       sample_index, score_done, selected_method, slave_input_reg,
       slave_output_reg, sort_done, start_GA) begin
    GA_done_reg_next = GA_done_reg;
    index_reset_reg_next = index_reset_reg;
    index_increment_reg_next = index_increment_reg;
    a2_method_reg_next = a2_method_reg;
    a3_method_reg_next = a3_method_reg;
    a4_method_reg_next = a4_method_reg;
    b4_method_reg_next = b4_method_reg;
    b2_method_reg_next = b2_method_reg;
    b3_method_reg_next = b3_method_reg;
    slave_input_reg_next = slave_input_reg;
    slave_output_reg_next = slave_output_reg;
    master_input_reg_next = master_input_reg;
    generation_increment_reg_next = generation_increment_reg;
    generation_reset_reg_next = generation_reset_reg;
    master_output_reg_next = master_output_reg;
    master_sort_reg_next = master_sort_reg;
    FIFO_out_en_reg_next = FIFO_out_en_reg;
    load_fifo_reg_next = load_fifo_reg;
    is_Chart_next = is_Chart;
    guard1 = 1'b0;
    case ( is_Chart)
      state_type_is_Chart_IN_Crossover1 :
        begin
          is_Chart_next = state_type_is_Chart_IN_index_update;
          slave_input_reg_next = 1'b0;
          slave_output_reg_next = 1'b0;
          master_input_reg_next = 1'b0;
          master_output_reg_next = 2'b00;
          master_sort_reg_next = 1'b0;
          generation_increment_reg_next = 1'b0;
          generation_reset_reg_next = 1'b0;
          index_increment_reg_next = 1'b1;
          index_reset_reg_next = 1'b0;
        end
      state_type_is_Chart_IN_Crossover2 :
        begin
          is_Chart_next = state_type_is_Chart_IN_index_update;
          slave_input_reg_next = 1'b0;
          slave_output_reg_next = 1'b0;
          master_input_reg_next = 1'b0;
          master_output_reg_next = 2'b00;
          master_sort_reg_next = 1'b0;
          generation_increment_reg_next = 1'b0;
          generation_reset_reg_next = 1'b0;
          index_increment_reg_next = 1'b1;
          index_reset_reg_next = 1'b0;
        end
      state_type_is_Chart_IN_Crossover3 :
        begin
          is_Chart_next = state_type_is_Chart_IN_index_update;
          slave_input_reg_next = 1'b0;
          slave_output_reg_next = 1'b0;
          master_input_reg_next = 1'b0;
          master_output_reg_next = 2'b00;
          master_sort_reg_next = 1'b0;
          generation_increment_reg_next = 1'b0;
          generation_reset_reg_next = 1'b0;
          index_increment_reg_next = 1'b1;
          index_reset_reg_next = 1'b0;
        end
      state_type_is_Chart_IN_Crossover4 :
        begin
          is_Chart_next = state_type_is_Chart_IN_index_update;
          slave_input_reg_next = 1'b0;
          slave_output_reg_next = 1'b0;
          master_input_reg_next = 1'b0;
          master_output_reg_next = 2'b00;
          master_sort_reg_next = 1'b0;
          generation_increment_reg_next = 1'b0;
          generation_reset_reg_next = 1'b0;
          index_increment_reg_next = 1'b1;
          index_reset_reg_next = 1'b0;
        end
      state_type_is_Chart_IN_Crossover5 :
        begin
          is_Chart_next = state_type_is_Chart_IN_index_update;
          slave_input_reg_next = 1'b0;
          slave_output_reg_next = 1'b0;
          master_input_reg_next = 1'b0;
          master_output_reg_next = 2'b00;
          master_sort_reg_next = 1'b0;
          generation_increment_reg_next = 1'b0;
          generation_reset_reg_next = 1'b0;
          index_increment_reg_next = 1'b1;
          index_reset_reg_next = 1'b0;
        end
      state_type_is_Chart_IN_Crossover_load_dad :
        begin
          if (random_gene == 3'b100) begin
            is_Chart_next = state_type_is_Chart_IN_Crossover4;
            a2_method_reg_next = 2'b10;
            a3_method_reg_next = 2'b10;
            a4_method_reg_next = 2'b10;
            b2_method_reg_next = 2'b10;
            b3_method_reg_next = 2'b11;
            b4_method_reg_next = 2'b11;
            slave_input_reg_next = 1'b1;
            slave_output_reg_next = 1'b0;
            master_input_reg_next = 1'b0;
            master_output_reg_next = 2'b01;
            master_sort_reg_next = 1'b0;
            generation_increment_reg_next = 1'b0;
            generation_reset_reg_next = 1'b0;
            index_increment_reg_next = 1'b0;
            index_reset_reg_next = 1'b0;
          end
          else if ((random_gene == 3'b101) || (random_gene == 3'b110)) begin
            is_Chart_next = state_type_is_Chart_IN_Crossover5;
            a2_method_reg_next = 2'b10;
            a3_method_reg_next = 2'b10;
            a4_method_reg_next = 2'b10;
            b2_method_reg_next = 2'b10;
            b3_method_reg_next = 2'b10;
            b4_method_reg_next = 2'b11;
            slave_input_reg_next = 1'b1;
            slave_output_reg_next = 1'b0;
            master_input_reg_next = 1'b0;
            master_output_reg_next = 2'b01;
            master_sort_reg_next = 1'b0;
            generation_increment_reg_next = 1'b0;
            generation_reset_reg_next = 1'b0;
            index_increment_reg_next = 1'b0;
            index_reset_reg_next = 1'b0;
          end
          else if (random_gene == 3'b011) begin
            is_Chart_next = state_type_is_Chart_IN_Crossover3;
            a2_method_reg_next = 2'b10;
            a3_method_reg_next = 2'b10;
            a4_method_reg_next = 2'b10;
            b2_method_reg_next = 2'b11;
            b3_method_reg_next = 2'b11;
            b4_method_reg_next = 2'b11;
            slave_input_reg_next = 1'b1;
            slave_output_reg_next = 1'b0;
            master_input_reg_next = 1'b0;
            master_output_reg_next = 2'b01;
            master_sort_reg_next = 1'b0;
            generation_increment_reg_next = 1'b0;
            generation_reset_reg_next = 1'b0;
            index_increment_reg_next = 1'b0;
            index_reset_reg_next = 1'b0;
          end
          else if (random_gene == 3'b010) begin
            is_Chart_next = state_type_is_Chart_IN_Crossover2;
            a2_method_reg_next = 2'b10;
            a3_method_reg_next = 2'b10;
            a4_method_reg_next = 2'b11;
            b2_method_reg_next = 2'b11;
            b3_method_reg_next = 2'b11;
            b4_method_reg_next = 2'b11;
            slave_input_reg_next = 1'b1;
            slave_output_reg_next = 1'b0;
            master_input_reg_next = 1'b0;
            master_output_reg_next = 2'b01;
            master_sort_reg_next = 1'b0;
            generation_increment_reg_next = 1'b0;
            generation_reset_reg_next = 1'b0;
            index_increment_reg_next = 1'b0;
            index_reset_reg_next = 1'b0;
          end
          else if (random_gene == 3'b001) begin
            is_Chart_next = state_type_is_Chart_IN_Crossover1;
            a2_method_reg_next = 2'b10;
            a3_method_reg_next = 2'b11;
            a4_method_reg_next = 2'b11;
            b2_method_reg_next = 2'b11;
            b3_method_reg_next = 2'b11;
            b4_method_reg_next = 2'b11;
            slave_input_reg_next = 1'b1;
            slave_output_reg_next = 1'b0;
            master_input_reg_next = 1'b0;
            master_output_reg_next = 2'b01;
            master_sort_reg_next = 1'b0;
            generation_increment_reg_next = 1'b0;
            generation_reset_reg_next = 1'b0;
            index_increment_reg_next = 1'b0;
            index_reset_reg_next = 1'b0;
          end
        end
      state_type_is_Chart_IN_Eliteism_or_Replication :
        begin
          is_Chart_next = state_type_is_Chart_IN_index_update;
          slave_input_reg_next = 1'b0;
          slave_output_reg_next = 1'b0;
          master_input_reg_next = 1'b0;
          master_output_reg_next = 2'b00;
          master_sort_reg_next = 1'b0;
          generation_increment_reg_next = 1'b0;
          generation_reset_reg_next = 1'b0;
          index_increment_reg_next = 1'b1;
          index_reset_reg_next = 1'b0;
        end
      state_type_is_Chart_IN_Enable_load_fifo :
        begin
          is_Chart_next = state_type_is_Chart_IN_wait_for_FIFO;
          load_fifo_reg_next = 1'b0;
        end
      state_type_is_Chart_IN_GA_done_state :
        begin
//          is_Chart_next = state_type_is_Chart_IN_initial_state;
          is_Chart_next = state_type_is_Chart_IN_GA_done_state;
        end
      state_type_is_Chart_IN_Mutation1 :
        begin
          is_Chart_next = state_type_is_Chart_IN_index_update;
          slave_input_reg_next = 1'b0;
          slave_output_reg_next = 1'b0;
          master_input_reg_next = 1'b0;
          master_output_reg_next = 2'b00;
          master_sort_reg_next = 1'b0;
          generation_increment_reg_next = 1'b0;
          generation_reset_reg_next = 1'b0;
          index_increment_reg_next = 1'b1;
          index_reset_reg_next = 1'b0;
        end
      state_type_is_Chart_IN_Mutation2 :
        begin
          is_Chart_next = state_type_is_Chart_IN_index_update;
          slave_input_reg_next = 1'b0;
          slave_output_reg_next = 1'b0;
          master_input_reg_next = 1'b0;
          master_output_reg_next = 2'b00;
          master_sort_reg_next = 1'b0;
          generation_increment_reg_next = 1'b0;
          generation_reset_reg_next = 1'b0;
          index_increment_reg_next = 1'b1;
          index_reset_reg_next = 1'b0;
        end
      state_type_is_Chart_IN_Mutation3 :
        begin
          is_Chart_next = state_type_is_Chart_IN_index_update;
          slave_input_reg_next = 1'b0;
          slave_output_reg_next = 1'b0;
          master_input_reg_next = 1'b0;
          master_output_reg_next = 2'b00;
          master_sort_reg_next = 1'b0;
          generation_increment_reg_next = 1'b0;
          generation_reset_reg_next = 1'b0;
          index_increment_reg_next = 1'b1;
          index_reset_reg_next = 1'b0;
        end
      state_type_is_Chart_IN_Mutation4 :
        begin
          is_Chart_next = state_type_is_Chart_IN_index_update;
          slave_input_reg_next = 1'b0;
          slave_output_reg_next = 1'b0;
          master_input_reg_next = 1'b0;
          master_output_reg_next = 2'b00;
          master_sort_reg_next = 1'b0;
          generation_increment_reg_next = 1'b0;
          generation_reset_reg_next = 1'b0;
          index_increment_reg_next = 1'b1;
          index_reset_reg_next = 1'b0;
        end
      state_type_is_Chart_IN_Mutation5 :
        begin
          is_Chart_next = state_type_is_Chart_IN_index_update;
          slave_input_reg_next = 1'b0;
          slave_output_reg_next = 1'b0;
          master_input_reg_next = 1'b0;
          master_output_reg_next = 2'b00;
          master_sort_reg_next = 1'b0;
          generation_increment_reg_next = 1'b0;
          generation_reset_reg_next = 1'b0;
          index_increment_reg_next = 1'b1;
          index_reset_reg_next = 1'b0;
        end
      state_type_is_Chart_IN_Mutation6 :
        begin
          is_Chart_next = state_type_is_Chart_IN_index_update;
          slave_input_reg_next = 1'b0;
          slave_output_reg_next = 1'b0;
          master_input_reg_next = 1'b0;
          master_output_reg_next = 2'b00;
          master_sort_reg_next = 1'b0;
          generation_increment_reg_next = 1'b0;
          generation_reset_reg_next = 1'b0;
          index_increment_reg_next = 1'b1;
          index_reset_reg_next = 1'b0;
        end
      state_type_is_Chart_IN_New_individual :
        begin
          is_Chart_next = state_type_is_Chart_IN_index_update;
          slave_input_reg_next = 1'b0;
          slave_output_reg_next = 1'b0;
          master_input_reg_next = 1'b0;
          master_output_reg_next = 2'b00;
          master_sort_reg_next = 1'b0;
          generation_increment_reg_next = 1'b0;
          generation_reset_reg_next = 1'b0;
          index_increment_reg_next = 1'b1;
          index_reset_reg_next = 1'b0;
        end
      state_type_is_Chart_IN_generation_update :
        begin
//          if (generation_counter == 16'b0010011100010000) begin //10000 generations
          if (generation_counter == 16'b0111010100110000) begin //30000 generations
//          if (generation_counter == 16'b0000000000000010) begin //2 generations
//          if (generation_counter == 16'b0001001110001000) begin //5000 generations
//          if (generation_counter == 16'b0000001111101000) begin //1000 generations
            is_Chart_next = state_type_is_Chart_IN_GA_done_state;
            GA_done_reg_next = 1'b1;
          end
          else begin
            is_Chart_next = state_type_is_Chart_IN_start_index_and_hold;
            index_reset_reg_next = 1'b1;
            index_increment_reg_next = 1'b1;
            slave_input_reg_next = 1'b0;
            generation_increment_reg_next = 1'b0;
          end
        end
      state_type_is_Chart_IN_index_and_hold :
        begin
          is_Chart_next = state_type_is_Chart_IN_score_population;
          GA_done_reg_next = 1'b0;
          a2_method_reg_next = 2'b01;
          a3_method_reg_next = 2'b01;
          a4_method_reg_next = 2'b01;
          b2_method_reg_next = 2'b01;
          b3_method_reg_next = 2'b01;
          b4_method_reg_next = 2'b01;
          slave_input_reg_next = 1'b0;
          slave_output_reg_next = 1'b1;
          master_input_reg_next = 1'b1;
          master_output_reg_next = 2'b00;
          master_sort_reg_next = 1'b0;
          generation_increment_reg_next = 1'b0;
          generation_reset_reg_next = 1'b0;
          index_increment_reg_next = 1'b0;
          index_reset_reg_next = 1'b0;
          FIFO_out_en_reg_next = 1'b1;
        end
      state_type_is_Chart_IN_index_update :
        begin
          if (sample_index == 4'b0101) begin
            is_Chart_next = state_type_is_Chart_IN_generation_update;
            slave_input_reg_next = 1'b0;
            slave_output_reg_next = 1'b0;
            master_input_reg_next = 1'b0;
            master_output_reg_next = 2'b00;
            master_sort_reg_next = 1'b0;
            generation_increment_reg_next = 1'b1;
            generation_reset_reg_next = 1'b0;
            index_increment_reg_next = 1'b0;
            index_reset_reg_next = 1'b1;
          end
          else if ((sample_index == 4'b0001) || (selected_method == 3'b001)) begin
            is_Chart_next = state_type_is_Chart_IN_Eliteism_or_Replication;
            a2_method_reg_next = 2'b11;
            a3_method_reg_next = 2'b11;
            a4_method_reg_next = 2'b11;
            b2_method_reg_next = 2'b11;
            b3_method_reg_next = 2'b11;
            b4_method_reg_next = 2'b11;
            slave_input_reg_next = 1'b1;
            slave_output_reg_next = 1'b0;
            master_input_reg_next = 1'b0;
            master_output_reg_next = 2'b01;
            master_sort_reg_next = 1'b0;
            generation_increment_reg_next = 1'b0;
            generation_reset_reg_next = 1'b0;
            index_increment_reg_next = 1'b0;
            index_reset_reg_next = 1'b0;
          end
          else if (selected_method == 3'b010) begin
            if (random_gene == 3'b101) begin
              is_Chart_next = state_type_is_Chart_IN_Mutation5;
              a2_method_reg_next = 2'b11;
              a3_method_reg_next = 2'b11;
              a4_method_reg_next = 2'b11;
              b2_method_reg_next = 2'b11;
              b3_method_reg_next = 2'b01;
              b4_method_reg_next = 2'b11;
              slave_input_reg_next = 1'b1;
              slave_output_reg_next = 1'b0;
              master_input_reg_next = 1'b0;
              master_output_reg_next = 2'b01;
              master_sort_reg_next = 1'b0;
              generation_increment_reg_next = 1'b0;
              generation_reset_reg_next = 1'b0;
              index_increment_reg_next = 1'b0;
              index_reset_reg_next = 1'b0;
            end
            else if (random_gene == 3'b110) begin
              is_Chart_next = state_type_is_Chart_IN_Mutation6;
              a2_method_reg_next = 2'b11;
              a3_method_reg_next = 2'b11;
              a4_method_reg_next = 2'b11;
              b2_method_reg_next = 2'b11;
              b3_method_reg_next = 2'b11;
              b4_method_reg_next = 2'b01;
              slave_input_reg_next = 1'b1;
              slave_output_reg_next = 1'b0;
              master_input_reg_next = 1'b0;
              master_output_reg_next = 2'b01;
              master_sort_reg_next = 1'b0;
              generation_increment_reg_next = 1'b0;
              generation_reset_reg_next = 1'b0;
              index_increment_reg_next = 1'b0;
              index_reset_reg_next = 1'b0;
            end
            else if (random_gene == 3'b100) begin
              is_Chart_next = state_type_is_Chart_IN_Mutation4;
              a2_method_reg_next = 2'b11;
              a3_method_reg_next = 2'b11;
              a4_method_reg_next = 2'b11;
              b2_method_reg_next = 2'b01;
              b3_method_reg_next = 2'b11;
              b4_method_reg_next = 2'b11;
              slave_input_reg_next = 1'b1;
              slave_output_reg_next = 1'b0;
              master_input_reg_next = 1'b0;
              master_output_reg_next = 2'b01;
              master_sort_reg_next = 1'b0;
              generation_increment_reg_next = 1'b0;
              generation_reset_reg_next = 1'b0;
              index_increment_reg_next = 1'b0;
              index_reset_reg_next = 1'b0;
            end
            else if (random_gene == 3'b011) begin
              is_Chart_next = state_type_is_Chart_IN_Mutation3;
              a2_method_reg_next = 2'b11;
              a3_method_reg_next = 2'b11;
              a4_method_reg_next = 2'b01;
              b2_method_reg_next = 2'b11;
              b3_method_reg_next = 2'b11;
              b4_method_reg_next = 2'b11;
              slave_input_reg_next = 1'b1;
              slave_output_reg_next = 1'b0;
              master_input_reg_next = 1'b0;
              master_output_reg_next = 2'b01;
              master_sort_reg_next = 1'b0;
              generation_increment_reg_next = 1'b0;
              generation_reset_reg_next = 1'b0;
              index_increment_reg_next = 1'b0;
              index_reset_reg_next = 1'b0;
            end
            else if (random_gene == 3'b010) begin
              is_Chart_next = state_type_is_Chart_IN_Mutation2;
              a2_method_reg_next = 2'b11;
              a3_method_reg_next = 2'b01;
              a4_method_reg_next = 2'b11;
              b2_method_reg_next = 2'b11;
              b3_method_reg_next = 2'b11;
              b4_method_reg_next = 2'b11;
              slave_input_reg_next = 1'b1;
              slave_output_reg_next = 1'b0;
              master_input_reg_next = 1'b0;
              master_output_reg_next = 2'b01;
              master_sort_reg_next = 1'b0;
              generation_increment_reg_next = 1'b0;
              generation_reset_reg_next = 1'b0;
              index_increment_reg_next = 1'b0;
              index_reset_reg_next = 1'b0;
            end
            else if (random_gene == 3'b001) begin
              is_Chart_next = state_type_is_Chart_IN_Mutation1;
              a2_method_reg_next = 2'b01;
              a3_method_reg_next = 2'b11;
              a4_method_reg_next = 2'b11;
              b2_method_reg_next = 2'b11;
              b3_method_reg_next = 2'b11;
              b4_method_reg_next = 2'b11;
              slave_input_reg_next = 1'b1;
              slave_output_reg_next = 1'b0;
              master_input_reg_next = 1'b0;
              master_output_reg_next = 2'b01;
              master_sort_reg_next = 1'b0;
              generation_increment_reg_next = 1'b0;
              generation_reset_reg_next = 1'b0;
              index_increment_reg_next = 1'b0;
              index_reset_reg_next = 1'b0;
            end
            else begin
              guard1 = 1'b1;
            end
          end
          else begin
            guard1 = 1'b1;
          end
        end
      state_type_is_Chart_IN_initial_random_population :
        begin
          if (sample_index == 4'b0101) begin
            is_Chart_next = state_type_is_Chart_IN_start_index_and_hold;
            index_reset_reg_next = 1'b1;
            index_increment_reg_next = 1'b1;
            slave_input_reg_next = 1'b0;
            generation_increment_reg_next = 1'b0;
          end
          else begin
            GA_done_reg_next = 1'b0;
            a2_method_reg_next = 2'b01;
            a3_method_reg_next = 2'b01;
            a4_method_reg_next = 2'b01;
            b2_method_reg_next = 2'b01;
            b3_method_reg_next = 2'b01;
            b4_method_reg_next = 2'b01;
            slave_input_reg_next = 1'b1;
            slave_output_reg_next = 1'b0;
            master_input_reg_next = 1'b0;
            master_output_reg_next = 2'b00;
            master_sort_reg_next = 1'b0;
            generation_increment_reg_next = 1'b0;
            generation_reset_reg_next = 1'b0;
            index_increment_reg_next = 1'b1;
            index_reset_reg_next = 1'b0;
          end
        end
      state_type_is_Chart_IN_initial_state :
        begin
          if (start_GA) begin
            is_Chart_next = state_type_is_Chart_IN_Enable_load_fifo;
            load_fifo_reg_next = 1'b1;
          end
          else begin
            GA_done_reg_next = 1'b0;
            a2_method_reg_next = 2'b01;
            a3_method_reg_next = 2'b01;
            a4_method_reg_next = 2'b01;
            b2_method_reg_next = 2'b01;
            b3_method_reg_next = 2'b01;
            b4_method_reg_next = 2'b01;
            slave_input_reg_next = 1'b0;
            slave_output_reg_next = 1'b0;
            master_input_reg_next = 1'b0;
            master_output_reg_next = 2'b00;
            master_sort_reg_next = 1'b0;
            generation_increment_reg_next = 1'b0;
            generation_reset_reg_next = 1'b1;
            index_increment_reg_next = 1'b0;
            index_reset_reg_next = 1'b1;
            load_fifo_reg_next = 1'b0;
            FIFO_out_en_reg_next = 1'b0;
          end
        end
      state_type_is_Chart_IN_score_population :
        begin
          if ((sample_index == 4'b0100) && score_done) begin
            is_Chart_next = state_type_is_Chart_IN_sort_population;
            slave_input_reg_next = 1'b0;
            slave_output_reg_next = 1'b0;
            master_input_reg_next = 1'b0;
            master_output_reg_next = 2'b00;
            master_sort_reg_next = 1'b1;
            generation_increment_reg_next = 1'b0;
            generation_reset_reg_next = 1'b0;
            index_increment_reg_next = 1'b0;
            index_reset_reg_next = 1'b1;
            FIFO_out_en_reg_next = 1'b0;
          end
          else if (score_done) begin
            is_Chart_next = state_type_is_Chart_IN_index_and_hold;
            index_increment_reg_next = 1'b1;
            slave_input_reg_next = 1'b0;
            master_input_reg_next = 1'b0;
            FIFO_out_en_reg_next = 1'b0;
          end
        end
      state_type_is_Chart_IN_sort_population :
        begin
          if (sort_done) begin
            is_Chart_next = state_type_is_Chart_IN_index_update;
            slave_input_reg_next = 1'b0;
            slave_output_reg_next = 1'b0;
            master_input_reg_next = 1'b0;
            master_output_reg_next = 2'b00;
            master_sort_reg_next = 1'b0;
            generation_increment_reg_next = 1'b0;
            generation_reset_reg_next = 1'b0;
            index_increment_reg_next = 1'b1;
            index_reset_reg_next = 1'b0;
          end
        end
      state_type_is_Chart_IN_start_index_and_hold :
        begin
          is_Chart_next = state_type_is_Chart_IN_score_population;
          GA_done_reg_next = 1'b0;
          a2_method_reg_next = 2'b01;
          a3_method_reg_next = 2'b01;
          a4_method_reg_next = 2'b01;
          b2_method_reg_next = 2'b01;
          b3_method_reg_next = 2'b01;
          b4_method_reg_next = 2'b01;
          slave_input_reg_next = 1'b0;
          slave_output_reg_next = 1'b1;
          master_input_reg_next = 1'b1;
          master_output_reg_next = 2'b00;
          master_sort_reg_next = 1'b0;
          generation_increment_reg_next = 1'b0;
          generation_reset_reg_next = 1'b0;
          index_increment_reg_next = 1'b0;
          index_reset_reg_next = 1'b0;
          FIFO_out_en_reg_next = 1'b1;
        end
      default :
        begin
          //case IN_wait_for_FIFO:
          if (FIFO_full) begin
            is_Chart_next = state_type_is_Chart_IN_initial_random_population;
          end
          else begin
            load_fifo_reg_next = 1'b0;
          end
        end
    endcase
    if (guard1) begin
      if (selected_method == 3'b100) begin
        is_Chart_next = state_type_is_Chart_IN_New_individual;
        a2_method_reg_next = 2'b01;
        a3_method_reg_next = 2'b01;
        a4_method_reg_next = 2'b01;
        b2_method_reg_next = 2'b01;
        b3_method_reg_next = 2'b01;
        b4_method_reg_next = 2'b01;
        slave_input_reg_next = 1'b1;
        slave_output_reg_next = 1'b0;
        master_input_reg_next = 1'b0;
        master_output_reg_next = 2'b01;
        master_sort_reg_next = 1'b0;
        generation_increment_reg_next = 1'b0;
        generation_reset_reg_next = 1'b0;
        index_increment_reg_next = 1'b0;
        index_reset_reg_next = 1'b0;
      end
    end
  end

  assign GA_done = GA_done_reg_next;
  assign index_reset = index_reset_reg_next;
  assign index_increment = index_increment_reg_next;
  assign a2_method = a2_method_reg_next;
  assign a3_method = a3_method_reg_next;
  assign a4_method = a4_method_reg_next;
  assign b4_method = b4_method_reg_next;
  assign b2_method = b2_method_reg_next;
  assign b3_method = b3_method_reg_next;
  assign slave_input = slave_input_reg_next;
  assign slave_output = slave_output_reg_next;
  assign master_input = master_input_reg_next;
  assign generation_increment = generation_increment_reg_next;
  assign generation_reset = generation_reset_reg_next;
  assign master_output = master_output_reg_next;
  assign master_sort = master_sort_reg_next;
  assign FIFO_out_en = FIFO_out_en_reg_next;
  assign load_fifo = load_fifo_reg_next;



endmodule  // Chart

